{
  "timestamp": "2024-10-26T12:24:32.067Z",
  "fileCount": 90,
  "files": [
    {
      "path": "/goinfre/zelhajou/42recall/.eslintrc.json",
      "content": "{\n  \"extends\": [\"next/core-web-vitals\", \"next/typescript\"]\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/README.md",
      "content": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/create/page.tsx",
      "content": "// app/(protected)/dashboard/create/page.tsx\nimport { FortyTwoDeckForm } from '@/components/decks/deck-form';\n\nexport default function CreateDeckPage() {\n  return (\n    <div className=\"max-w-2xl mx-auto py-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">Create New Deck</h1>\n      <FortyTwoDeckForm />\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/decks/[deckId]/page.tsx",
      "content": "// app/(protected)/dashboard/decks/[deckId]/page.tsx\nimport { notFound } from 'next/navigation';\nimport { prisma } from '@/app/lib/prisma';\nimport { DeckDetails } from '@/components/decks/deck-details';\nimport { Deck } from '@/types/deck';\n\ninterface PageProps {\n  params: {\n    deckId: string;\n  };\n}\n\nasync function getDeck(deckId: string): Promise<Deck> {\n  const deck = await prisma.deck.findUnique({\n    where: { id: deckId },\n    include: {\n      cards: {\n        orderBy: {\n          order: 'asc'\n        }\n      },\n      tags: true,\n      user: {\n        select: {\n          id: true,\n          name: true,\n          image: true\n        }\n      },\n      _count: {\n        select: { cards: true }\n      }\n    }\n  });\n\n  if (!deck) {\n    notFound();\n  }\n\n  // Convert dates to strings\n  return {\n    ...deck,\n    createdAt: deck.createdAt.toISOString(),\n    updatedAt: deck.updatedAt.toISOString(),\n    cards: deck.cards.map(card => ({\n      ...card,\n      createdAt: card.createdAt.toISOString(),\n      updatedAt: card.updatedAt.toISOString()\n    }))\n  };\n}\n\nexport default async function DeckPage({ params }: PageProps) {\n  const deck = await getDeck(params.deckId);\n  return <DeckDetails deck={deck} />;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/decks/[deckId]/study/page.tsx",
      "content": "// app/(protected)/dashboard/decks/[deckId]/study/page.tsx\nimport { notFound } from 'next/navigation';\nimport { prisma } from '@/app/lib/prisma';\nimport { StudySession } from '@/components/study/study-session';\nimport { Deck } from '@/types/deck';\nimport { transformPrismaDeckToApp } from '@/app/lib/transformers';\n\ninterface StudyPageProps {\n  params: {\n    deckId: string;\n  };\n}\n\nasync function getDeck(deckId: string): Promise<Deck> {\n  const prismaData = await prisma.deck.findUnique({\n    where: { id: deckId },\n    include: {\n      cards: {\n        orderBy: {\n          order: 'asc'\n        }\n      },\n      user: {\n        select: {\n          id: true,\n          name: true,\n          image: true,\n        }\n      },\n      tags: true,\n      _count: {\n        select: { \n          cards: true \n        }\n      }\n    }\n  });\n\n  if (!prismaData) {\n    notFound();\n  }\n\n  return transformPrismaDeckToApp(prismaData);\n}\n\nexport default async function StudyPage({ params }: StudyPageProps) {\n  const deck = await getDeck(params.deckId);\n\n  return (\n    <div className=\"container max-w-3xl mx-auto py-8\">\n      <StudySession deck={deck} />\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/decks/layout.tsx",
      "content": "// app/(protected)/dashboard/decks/layout.tsx\nimport { Suspense } from 'react';\n\nexport default function DecksLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      {children}\n    </Suspense>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/decks/page.tsx",
      "content": "// app/(protected)/dashboard/decks/page.tsx\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, usePathname, useRouter } from 'next/navigation';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { DeckCard } from '@/components/decks/deck-card';\nimport { DeckFilters } from '@/components/decks/deck-filters';\nimport { Pagination } from '@/components/ui/pagination';\nimport { PlusCircle } from 'lucide-react';\nimport Link from 'next/link';\nimport { DeckFilters as DeckFiltersType, PaginationState } from '@/types/deck';\n\nconst DEFAULT_FILTERS: DeckFiltersType = {\n  search: '',\n  project: null,\n  topic: null,\n  sortBy: 'updated'\n};\n\nexport default function DecksPage() {\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [decks, setDecks] = useState<any[]>([]);\n  const [filters, setFilters] = useState<DeckFiltersType>(DEFAULT_FILTERS);\n  const [pagination, setPagination] = useState<PaginationState>({\n    page: 1,\n    limit: 12,\n    total: 0,\n    pages: 0\n  });\n\n  useEffect(() => {\n    const page = Number(searchParams.get('page')) || 1;\n    const search = searchParams.get('search') || '';\n    const project = searchParams.get('project');\n    const topic = searchParams.get('topic');\n    const sortBy = (searchParams.get('sort') as DeckFiltersType['sortBy']) || 'updated';\n\n    setFilters({ search, project, topic, sortBy });\n    setPagination(prev => ({ ...prev, page }));\n  }, [searchParams]);\n\n  useEffect(() => {\n    const fetchDecks = async () => {\n      setIsLoading(true);\n      try {\n        const queryParams = new URLSearchParams({\n          page: pagination.page.toString(),\n          limit: pagination.limit.toString(),\n          ...(filters.search && { search: filters.search }),\n          ...(filters.project && { project: filters.project }),\n          ...(filters.topic && { topic: filters.topic }),\n          sort: filters.sortBy\n        });\n\n        const response = await fetch(`/api/decks?${queryParams}`);\n        const data = await response.json();\n\n        if (!response.ok) throw new Error(data.error);\n\n        setDecks(data.data.decks);\n        setPagination(data.data.pagination);\n      } catch (error) {\n        console.error('Error fetching decks:', error);\n        // You might want to show an error toast here\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDecks();\n  }, [filters, pagination.page, pagination.limit]);\n\n  const handleFiltersChange = (newFilters: DeckFiltersType) => {\n    const params = new URLSearchParams();\n\n    searchParams.forEach((value, key) => {\n      params.append(key, value);\n    });\n    \n    Object.entries(newFilters).forEach(([key, value]) => {\n      if (value) {\n        params.set(key, value);\n      } else {\n        params.delete(key);\n      }\n    });\n    \n    params.set('page', '1');\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    const params = new URLSearchParams(searchParams);\n    params.set('page', newPage.toString());\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-8 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Your Decks</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and study your flashcard decks\n          </p>\n        </div>\n        \n        <Link href=\"/dashboard/create\">\n          <Button>\n            <PlusCircle className=\"w-4 h-4 mr-2\" />\n            Create Deck\n          </Button>\n        </Link>\n      </div>\n\n      <DeckFilters filters={filters} onChange={handleFiltersChange} />\n\n      {isLoading ? (\n        <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"h-[200px] animate-pulse\" />\n          ))}\n        </div>\n      ) : decks.length === 0 ? (\n        <Card className=\"p-8 text-center\">\n          <div className=\"max-w-sm mx-auto space-y-4\">\n            <h2 className=\"text-xl font-semibold\">No decks found</h2>\n            <p className=\"text-muted-foreground\">\n              {filters.search || filters.project || filters.topic\n                ? 'Try adjusting your filters'\n                : 'Create your first deck to start studying!'}\n            </p>\n            {!filters.search && !filters.project && !filters.topic && (\n              <Link href=\"/dashboard/create\">\n                <Button>\n                  <PlusCircle className=\"w-4 h-4 mr-2\" />\n                  Create Your First Deck\n                </Button>\n              </Link>\n            )}\n          </div>\n        </Card>\n      ) : (\n        <>\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {decks.map((deck) => (\n              <Link \n                key={deck.id} \n                href={`/dashboard/decks/${deck.id}`}\n                className=\"group\"\n              >\n                <DeckCard deck={deck} />\n              </Link>\n            ))}\n          </div>\n\n          <Pagination \n            pagination={pagination}\n            onChange={handlePageChange}\n          />\n        </>\n      )}\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/layout.tsx",
      "content": "// app/(protected)/dashboard/layout.tsx\nimport { DeckProvider } from '@/contexts/deck-context';\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <DeckProvider>\n      {/* Your existing layout content */}\n      {children}\n    </DeckProvider>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/page.tsx",
      "content": "// app/(protected)/dashboard/page.tsx\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/app/lib/auth';\nimport { prisma } from '@/app/lib/prisma';\nimport { DashboardOverview } from '@/components/dashboard/dashboard-overview';\nimport { notFound } from 'next/navigation';\n\nasync function getDashboardData(userId: string) {\n  const data = await prisma.user.findUnique({\n    where: { id: userId },\n    include: {\n      decks: {\n        include: {\n          cards: true,\n          _count: {\n            select: { \n              cards: true,\n              studySessions: true\n            }\n          },\n          studySessions: {\n            orderBy: {\n              startTime: 'desc'\n            },\n            take: 1\n          }\n        },\n        orderBy: {\n          updatedAt: 'desc'\n        },\n        take: 6 // Limit to 6 most recent decks\n      },\n      _count: {\n        select: { \n          decks: true,\n        }\n      }\n    }\n  });\n\n  if (!data) {\n    notFound();\n  }\n\n  return data;\n}\n\nexport default async function DashboardPage() {\n  const session = await getServerSession(authOptions);\n  if (!session?.user?.id) return null;\n\n  const dashboardData = await getDashboardData(session.user.id);\n  \n  return <DashboardOverview data={dashboardData} />;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/dashboard/study/page.tsx",
      "content": "// app/(protected)/dashboard/study/page.tsx\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\nimport { StudyDashboard } from '@/components/study/study-dashboard';\n\nasync function getStudyData(userId: string) {\n  const [decks, recentSessions, stats] = await Promise.all([\n    // Get decks with study progress\n    prisma.deck.findMany({\n      where: { userId },\n      include: {\n        cards: {\n          include: {\n            progress: {\n              where: { userId }\n            }\n          }\n        },\n        _count: {\n          select: { cards: true }\n        }\n      },\n      orderBy: { updatedAt: 'desc' }\n    }),\n    // Get recent study sessions\n    prisma.studySession.findMany({\n      where: { userId },\n      include: {\n        deck: {\n          select: {\n            title: true,\n            project: true,\n            topic: true\n          }\n        }\n      },\n      orderBy: { startTime: 'desc' },\n      take: 5\n    }),\n    // Get overall study stats\n    prisma.studySession.aggregate({\n      where: { userId },\n      _count: { _all: true },\n      _sum: { cardsStudied: true }\n    })\n  ]);\n\n  return { decks, recentSessions, stats };\n}\n\nexport default async function StudyHomePage() {\n  const session = await getServerSession(authOptions);\n  if (!session?.user?.id) return null;\n\n  const data = await getStudyData(session.user.id);\n\n  return <StudyDashboard data={data} />;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/(protected)/layout.tsx",
      "content": "// app/(protected)/layout.tsx\nimport { getServerSession } from 'next-auth/next';\nimport { redirect } from 'next/navigation';\nimport { authOptions } from '@/app/lib/auth';\nimport DashboardLayout from '@/components/dashboard/layout';\n\nexport default async function ProtectedLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const session = await getServerSession(authOptions);\n\n  if (!session) {\n    redirect('/');\n  }\n\n  return <DashboardLayout>{children}</DashboardLayout>;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/auth/signin/page.tsx",
      "content": "// app/auth/signin/page.tsx\nimport { LoginButton } from '@/components/auth/login-button'\n\nexport default function SignInPage() {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center p-24\">\n      <div className=\"w-full max-w-sm space-y-4\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold\">Welcome to 42Recall</h1>\n          <p className=\"text-gray-500 mt-2\">Sign in to continue</p>\n        </div>\n        <div className=\"flex justify-center\">\n          <LoginButton />\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/[deckId]/cards/[cardId]/route.ts",
      "content": "// app/api/decks/[deckId]/cards/[cardId]/route.ts\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\nimport { z } from 'zod';\n\nconst updateCardSchema = z.object({\n  front: z.string().min(1).optional(),\n  back: z.string().min(1).optional(),\n  hint: z.string().nullable().optional(),\n  code: z.string().nullable().optional(),\n});\n\nexport async function PATCH(\n  req: Request,\n  { params }: { params: { deckId: string; cardId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // First, verify the deck belongs to the user and the card exists\n    const card = await prisma.card.findUnique({\n      where: { id: params.cardId },\n      include: {\n        deck: {\n          select: { userId: true }\n        }\n      }\n    });\n\n    if (!card) {\n      return NextResponse.json({ error: 'Card not found' }, { status: 404 });\n    }\n\n    if (card.deck.userId !== session.user.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const json = await req.json();\n    const updates = updateCardSchema.parse(json);\n\n    // Update the card while preserving its order\n    const updatedCard = await prisma.card.update({\n      where: { id: params.cardId },\n      data: {\n        ...updates,\n        order: card.order, // Explicitly preserve the order\n      }\n    });\n\n    return NextResponse.json({ data: updatedCard });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    console.error('Error updating card:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  req: Request,\n  { params }: { params: { deckId: string; cardId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const deck = await prisma.deck.findUnique({\n      where: { id: params.deckId },\n      select: { userId: true }\n    });\n\n    if (!deck || deck.userId !== session.user.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    await prisma.card.delete({\n      where: { id: params.cardId }\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting card:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/[deckId]/cards/[cardId]/study/route.ts",
      "content": "// app/api/decks/[deckId]/cards/[cardId]/study/route.ts\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\n\nexport async function POST(\n  req: Request,\n  { params }: { params: { deckId: string; cardId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { isCorrect } = await req.json();\n\n    // Update or create card progress\n    const progress = await prisma.cardProgress.upsert({\n      where: {\n        userId_cardId: {\n          userId: session.user.id,\n          cardId: params.cardId,\n        },\n      },\n      update: {\n        lastReviewed: new Date(),\n        repetitions: { increment: 1 },\n        nextReview: new Date(), // You might want to implement spaced repetition logic here\n      },\n      create: {\n        userId: session.user.id,\n        cardId: params.cardId,\n        lastReviewed: new Date(),\n        repetitions: 1,\n      },\n    });\n\n    return NextResponse.json({ data: progress });\n  } catch (error) {\n    console.error('Error recording study progress:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/[deckId]/cards/reorder/route.ts",
      "content": "// app/api/decks/[deckId]/cards/reorder/route.ts\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\nimport { z } from 'zod';\n\nconst reorderSchema = z.object({\n  orderedIds: z.array(z.string())\n});\n\nexport async function POST(\n  req: Request,\n  { params }: { params: { deckId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const deck = await prisma.deck.findUnique({\n      where: { id: params.deckId },\n      select: { userId: true }\n    });\n\n    if (!deck || deck.userId !== session.user.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const json = await req.json();\n    const { orderedIds } = reorderSchema.parse(json);\n\n    await prisma.$transaction(\n      orderedIds.map((id, index) =>\n        prisma.card.update({\n          where: { id },\n          data: { order: index }\n        })\n      )\n    );\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    console.error('Error reordering cards:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/[deckId]/cards/route.ts",
      "content": "// app/api/decks/[deckId]/cards/route.ts\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\nimport { z } from 'zod';\n\nconst cardSchema = z.object({\n  front: z.string().min(1),\n  back: z.string().min(1),\n  hint: z.string().optional(),\n  code: z.string().optional(),\n});\n\nconst createCardsSchema = z.object({\n  cards: z.array(cardSchema)\n});\n\nexport async function POST(\n  req: Request,\n  { params }: { params: { deckId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const json = await req.json();\n    const body = createCardsSchema.parse(json);\n\n    const deck = await prisma.deck.findUnique({\n      where: { id: params.deckId },\n      select: { userId: true, _count: { select: { cards: true } } }\n    });\n\n    if (!deck) {\n      return NextResponse.json({ error: 'Deck not found' }, { status: 404 });\n    }\n\n    if (deck.userId !== session.user.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const lastOrder = deck._count.cards;\n\n    const cards = await prisma.$transaction(\n      body.cards.map((card, index) =>\n        prisma.card.create({\n          data: {\n            ...card,\n            order: lastOrder + index,\n            deckId: params.deckId,\n          }\n        })\n      )\n    );\n\n    return NextResponse.json({ data: cards });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    console.error('Error creating cards:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/[deckId]/route.ts",
      "content": "// app/api/decks/[deckId]/route.ts\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { prisma } from \"@/app/lib/prisma\";\nimport { authOptions } from \"@/app/lib/auth\";\nimport { z } from \"zod\";\n\nconst updateDeckSchema = z.object({\n  title: z.string().min(1).max(100),\n  description: z.string().optional(),\n  project: z.string().optional(),\n  topic: z.string().optional(),\n  isPublic: z.boolean(),\n});\n\nexport async function PATCH(\n  req: Request,\n  { params }: { params: { deckId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const json = await req.json();\n    const body = updateDeckSchema.parse(json);\n\n    const deck = await prisma.deck.update({\n      where: { id: params.deckId },\n      data: body,\n      include: {\n        cards: true,\n        tags: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n            image: true\n          }\n        },\n        _count: {\n          select: { cards: true }\n        }\n      }\n    });\n\n    return NextResponse.json({ data: deck });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    console.error(\"Error updating deck:\", error);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  req: Request,\n  { params }: { params: { deckId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const deck = await prisma.deck.findUnique({\n      where: { id: params.deckId },\n      select: { userId: true },\n    });\n\n    if (!deck) {\n      return NextResponse.json({ error: \"Deck not found\" }, { status: 404 });\n    }\n\n    if (deck.userId !== session.user.id) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    await prisma.deck.delete({\n      where: { id: params.deckId },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error deleting deck:\", error);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 }\n    );\n  }\n}\nexport async function GET(\n  req: Request,\n  { params }: { params: { deckId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const deck = await prisma.deck.findUnique({\n      where: { id: params.deckId },\n      include: {\n        cards: {\n          orderBy: {\n            order: \"asc\",\n          },\n        },\n        tags: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n            image: true,\n          },\n        },\n        _count: {\n          select: { cards: true },\n        },\n      },\n    });\n\n    if (!deck) {\n      return NextResponse.json({ error: \"Deck not found\" }, { status: 404 });\n    }\n\n    if (deck.userId !== session.user.id && !deck.isPublic) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    return NextResponse.json({ data: deck });\n  } catch (error) {\n    console.error(\"Error fetching deck:\", error);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 }\n    );\n  }\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/[deckId]/study-sessions/route.ts",
      "content": "// app/api/decks/[deckId]/study-sessions/route.ts\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\n\nexport async function POST(\n  req: Request,\n  { params }: { params: { deckId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { startTime, endTime, cardsStudied, correctAnswers, incorrectAnswers } = await req.json();\n\n    const studySession = await prisma.studySession.create({\n      data: {\n        userId: session.user.id,\n        deckId: params.deckId,\n        startTime: new Date(startTime),\n        endTime: new Date(endTime),\n        cardsStudied,\n      },\n    });\n\n    return NextResponse.json({ data: studySession });\n  } catch (error) {\n    console.error('Error saving study session:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/api/decks/route.ts",
      "content": "// app/api/decks/route.ts\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { prisma } from '@/app/lib/prisma';\nimport { authOptions } from '@/app/lib/auth';\nimport { z } from 'zod';\nimport { Prisma } from '@prisma/client';\n\nconst reorderSchema = z.object({\n  orderedIds: z.array(z.string())\n});\n\nconst CardSchema = z.object({\n  front: z.string().min(1),\n  back: z.string().min(1),\n  hint: z.string().optional(),\n  code: z.string().optional(),\n});\n\nconst createDeckSchema = z.object({\n  title: z.string().min(1).max(100),\n  description: z.string().optional(),\n  project: z.string().optional(),\n  topic: z.string().optional(),\n  isPublic: z.boolean().default(false),\n  cards: z.array(CardSchema)\n});\n\nexport async function GET(req: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(req.url);\n    const page = Number(searchParams.get('page')) || 1;\n    const limit = Number(searchParams.get('limit')) || 12;\n    const search = searchParams.get('search') || undefined;\n    const project = searchParams.get('project') || undefined;\n    const topic = searchParams.get('topic') || undefined;\n    const sort = searchParams.get('sort') || 'updated';\n\n    // Create properly typed where clause\n    const where: Prisma.DeckWhereInput = {\n      userId: session.user.id,\n      ...(project && { project }),\n      ...(topic && { topic }),\n      ...(search && {\n        OR: [\n          {\n            title: {\n              contains: search,\n              mode: 'insensitive' as Prisma.QueryMode\n            }\n          },\n          {\n            description: {\n              contains: search,\n              mode: 'insensitive' as Prisma.QueryMode\n            }\n          }\n        ]\n      })\n    };\n\n    // Create properly typed orderBy\n    const orderBy: Prisma.DeckOrderByWithRelationInput = (() => {\n      switch (sort) {\n        case 'created':\n          return { createdAt: 'desc' };\n        case 'alpha':\n          return { title: 'asc' };\n        case 'cards':\n          return {\n            cards: {\n              _count: 'desc'\n            }\n          };\n        default:\n          return { updatedAt: 'desc' };\n      }\n    })();\n\n    const [decks, total] = await Promise.all([\n      prisma.deck.findMany({\n        where,\n        include: {\n          _count: {\n            select: { cards: true }\n          },\n          tags: true,\n          user: {\n            select: {\n              name: true,\n              image: true\n            }\n          }\n        },\n        orderBy,\n        skip: (page - 1) * limit,\n        take: limit,\n      }),\n      prisma.deck.count({ where })\n    ]);\n\n    return NextResponse.json({\n      data: {\n        decks,\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching decks:', error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' }, \n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const json = await req.json();\n    const body = createDeckSchema.parse(json);\n\n    const deck = await prisma.deck.create({\n      data: {\n        title: body.title,\n        description: body.description || null,\n        project: body.project || null,\n        topic: body.topic || null,\n        isPublic: body.isPublic,\n        userId: session.user.id,\n        cards: {\n          create: body.cards.map((card, index) => ({\n            front: card.front,\n            back: card.back,\n            hint: card.hint || null,\n            code: card.code || null,\n            order: index\n          }))\n        }\n      },\n      include: {\n        cards: {\n          orderBy: {\n            order: 'asc'\n          }\n        },\n        tags: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n          }\n        },\n        _count: {\n          select: { cards: true }\n        }\n      }\n    });\n\n    return NextResponse.json({ data: deck });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    console.error('Error creating deck:', error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' }, \n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/auth/error/page.tsx",
      "content": "// app/auth/error/page.tsx\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport Link from 'next/link'\n\nexport default function AuthErrorPage() {\n  const searchParams = useSearchParams()\n  const error = searchParams?.get('error')\n\n  const getErrorMessage = (error: string | null) => {\n    switch (error) {\n      case 'OAuthAccountNotLinked':\n        return 'This email is already associated with another account. Please sign in using the correct provider.'\n      case 'AccessDenied':\n        return 'Access denied. You do not have permission to access this resource.'\n      case 'Configuration':\n        return 'There is a problem with the server configuration. Please try again later.'\n      default:\n        return 'An error occurred during authentication. Please try again.'\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center p-24\">\n      <div className=\"w-full max-w-md space-y-4\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Authentication Error</h1>\n          <p className=\"text-gray-600\">{getErrorMessage(error)}</p>\n        </div>\n        <div className=\"flex justify-center gap-4\">\n          <Button asChild>\n            <Link href=\"/\">Go Home</Link>\n          </Button>\n          <Button asChild variant=\"outline\">\n            <Link href=\"/auth/signin\">Try Again</Link>\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/auth/signin/page.tsx",
      "content": "// app/auth/signin/page.tsx\nimport { getServerSession } from 'next-auth/next'\nimport { redirect } from 'next/navigation'\nimport { authOptions } from '@/app/lib/auth'\nimport { LoginButton } from '@/components/auth/login-button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { BookOpen, BrainCircuit, LineChart } from 'lucide-react'\n\nexport default async function SignInPage() {\n  const session = await getServerSession(authOptions)\n  \n  if (session) {\n    redirect('/dashboard')\n  }\n\n  return (\n    <div className=\"container relative h-screen flex-col items-center justify-center grid lg:max-w-none lg:grid-cols-2 lg:px-0\">\n      {/* Left side - Background and branding */}\n      <div className=\"relative hidden h-full flex-col bg-zinc-900 p-10 text-white dark:border-r lg:flex\">\n        <div className=\"relative z-20 flex items-center text-lg font-medium\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"mr-2 h-6 w-6\"\n          >\n            <path d=\"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3\" />\n          </svg>\n          42Recall\n        </div>\n        <div className=\"relative z-20 mt-auto\">\n          <blockquote className=\"space-y-2\">\n            <p className=\"text-lg\">\n              \"Master your learning journey with spaced repetition and active recall techniques.\"\n            </p>\n            <footer className=\"text-sm\">42 Network</footer>\n          </blockquote>\n        </div>\n      </div>\n\n      {/* Right side - Login form */}\n      <div className=\"lg:p-8\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-center\">Welcome to 42Recall</CardTitle>\n              <CardDescription className=\"text-center\">\n                Sign in with your 42 account to get started\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"grid gap-4\">\n              {/* Features */}\n              <div className=\"grid gap-4\">\n                <div className=\"flex items-center gap-4\">\n                  <BookOpen className=\"h-5 w-5 text-primary\" />\n                  <div className=\"text-sm text-muted-foreground\">\n                    Create and manage flashcard decks\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <BrainCircuit className=\"h-5 w-5 text-primary\" />\n                  <div className=\"text-sm text-muted-foreground\">\n                    Learn using spaced repetition\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <LineChart className=\"h-5 w-5 text-primary\" />\n                  <div className=\"text-sm text-muted-foreground\">\n                    Track your learning progress\n                  </div>\n                </div>\n              </div>\n\n              {/* Login button */}\n              <LoginButton />\n            </CardContent>\n          </Card>\n          <p className=\"px-8 text-center text-sm text-muted-foreground\">\n            Built with ❤️ by 42 students\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/auth/auth-component.tsx",
      "content": "// app/components/auth/auth-component.tsx\n'use client'\n\nimport { useSession } from \"next-auth/react\"\nimport { Button } from \"../ui/button\"\nimport { signIn, signOut } from \"next-auth/react\"\n\nexport function AuthComponent() {\n  const { data: session, status } = useSession()\n\n  if (status === \"loading\") {\n    return <div>Loading...</div>\n  }\n\n  if (session) {\n    return (\n      <div className=\"flex flex-col items-center gap-4\">\n        <p>Welcome, {session.user?.name}</p>\n        <Button onClick={() => signOut()} variant=\"outline\">\n          Sign out\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <Button onClick={() => signIn('42-school')}>\n      Sign in with 42\n    </Button>\n  )\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/auth/login-button.tsx",
      "content": "'use client'\n\nimport { signIn } from 'next-auth/react'\nimport { Button } from '@/components/ui/button'\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Loader2 } from 'lucide-react'\nimport Image from 'next/image'\n\nexport function LoginButton() {\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleLogin = async () => {\n    try {\n      setIsLoading(true)\n      const result = await signIn('42-school', {\n        callbackUrl: '/dashboard',\n        redirect: false,\n      })\n\n      if (result?.ok) {\n        setTimeout(() => {\n          router.push('/dashboard')\n        }, 3000)\n      }\n    } catch (error) {\n      console.error('Login error:', error)\n    }\n  }\n\n  return (\n    <Button \n      className=\"w-full flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg shadow-lg transition-all duration-300\" \n      size=\"lg\"\n      onClick={handleLogin}\n      disabled={isLoading}\n      aria-label=\"Sign in with 42\"\n    >\n      {isLoading ? (\n        <>\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          Connecting...\n        </>\n      ) : (\n        <>\n          <Image \n            src=\"/images/logo.svg\" \n            alt=\"42 Logo\" \n            width={24} \n            height={24} \n            className=\"h-6 w-6\"\n          />\n          Sign in with 42\n        </>\n      )}\n    </Button>\n  )\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dashboard/dashboard-metrics.tsx",
      "content": "// app/components/dashboard/dashboard-metrics.tsx\n'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Code2, GitBranch, Circle, Target, Book } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nexport function DashboardMetrics() {\n  // Sample data - in production, this would come from your API\n  const studyProgress = [\n    { date: '2024-01', xp: 4200 },\n    { date: '2024-02', xp: 7840 },\n    { date: '2024-03', xp: 9650 },\n    { date: '2024-04', xp: 12480 },\n  ];\n\n  const commonCircles = [\n    \"42cursus\",\n    \"Inner Circle\",\n    \"Outer Circle\",\n    \"Unix\",\n    \"Graphics\",\n    \"Algorithms\",\n    \"Web\"\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Current Progress Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Level</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">Level 7.42</div>\n            <p className=\"text-xs text-muted-foreground\">42% to next level</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Project</CardTitle>\n            <Code2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">minishell</div>\n            <p className=\"text-xs text-muted-foreground\">In progress</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Study Streak</CardTitle>\n            <GitBranch className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">7 days</div>\n            <p className=\"text-xs text-muted-foreground\">Keep pushing!</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Blackhole</CardTitle>\n            <Circle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">28 days</div>\n            <p className=\"text-xs text-muted-foreground\">Time remaining</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Study Progress Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>XP Progress</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[200px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={studyProgress}>\n                <XAxis \n                  dataKey=\"date\" \n                  stroke=\"#888888\"\n                  fontSize={12}\n                />\n                <YAxis\n                  stroke=\"#888888\"\n                  fontSize={12}\n                />\n                <Tooltip />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"xp\"\n                  stroke=\"hsl(var(--primary))\"\n                  strokeWidth={2}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Study Circles */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Study Circles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {commonCircles.map((circle, i) => (\n                <div key={i} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Book className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{circle}</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Study Now\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { action: \"Completed session\", project: \"ft_printf functions\", time: \"2h ago\" },\n                { action: \"Added cards\", project: \"System calls list\", time: \"5h ago\" },\n                { action: \"Mastered topic\", project: \"Linked Lists\", time: \"1d ago\" },\n                { action: \"Started studying\", project: \"Shell Commands\", time: \"2d ago\" },\n              ].map((activity, i) => (\n                <div key={i} className=\"flex items-center justify-between border-b pb-2 last:border-0\">\n                  <div>\n                    <p className=\"font-medium\">{activity.action}</p>\n                    <p className=\"text-sm text-muted-foreground\">{activity.project}</p>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">{activity.time}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dashboard/dashboard-overview.tsx",
      "content": "// app/components/dashboard/dashboard-overview.tsx\n'use client';\n\nimport Link from 'next/link';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport {\n  BookOpen,\n  Plus,\n  BarChart2,\n  Clock,\n  ArrowRight,\n} from 'lucide-react';\n\ninterface DashboardOverviewProps {\n  data: any; // Replace with proper type\n}\n\nexport function DashboardOverview({ data }: DashboardOverviewProps) {\n  // Calculate total cards across all decks\n  const totalCards = data.decks.reduce((sum: number, deck: any) => \n    sum + deck._count.cards, 0\n  );\n\n  // Calculate total study sessions\n  const totalStudySessions = data.decks.reduce((sum: number, deck: any) => \n    sum + deck._count.studySessions, 0\n  );\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Welcome back, {data.name || 'Student'}!</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Here's an overview of your learning progress\n          </p>\n        </div>\n        <Button asChild>\n          <Link href=\"/dashboard/create\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Deck\n          </Link>\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Decks</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{data._count.decks}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {totalCards} cards total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Study Sessions</CardTitle>\n            <BarChart2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalStudySessions}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all decks\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Last Study</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {data.decks.some((deck: any) => deck.studySessions.length > 0)\n                ? new Date(data.decks.find((deck: any) => \n                    deck.studySessions.length > 0\n                  ).studySessions[0].startTime).toLocaleDateString()\n                : 'No sessions yet'\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Decks */}\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <h2 className=\"text-xl font-semibold\">Recent Decks</h2>\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/dashboard/decks\">\n              View All\n              <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Link>\n          </Button>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {data.decks.map((deck: any) => (\n            <Link \n              key={deck.id} \n              href={`/dashboard/decks/${deck.id}`}\n              className=\"block group\"\n            >\n              <Card className=\"transition-shadow hover:shadow-md\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-semibold group-hover:text-primary\">\n                      {deck.title}\n                    </h3>\n                    {deck.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {deck.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <BookOpen className=\"h-4 w-4 mr-1\" />\n                      {deck._count.cards} cards\n                      {deck.project && (\n                        <>\n                          <span className=\"mx-2\">•</span>\n                          {deck.project}\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n\n          {data.decks.length === 0 && (\n            <Card className=\"col-span-full\">\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">\n                  No decks yet. Create your first deck to get started!\n                </p>\n                <Button className=\"mt-4\" asChild>\n                  <Link href=\"/dashboard/create\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Deck\n                  </Link>\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dashboard/layout.tsx",
      "content": "// app/components/dashboard/layout.tsx\n'use client';\n\nimport { Fragment } from 'react';\nimport { useSession, signOut } from 'next-auth/react';\nimport { Menu, Transition } from '@headlessui/react';\nimport { \n  HomeIcon, \n  PlusCircleIcon, \n  BookOpenIcon, \n  Cog6ToothIcon,\n  BellIcon,\n  ChevronDownIcon,\n  ArrowLeftOnRectangleIcon,\n  UserCircleIcon\n} from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport clsx from 'clsx';\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nconst navigation = [\n  { name: 'Dashboard', href: '/dashboard', icon: HomeIcon },\n  { name: 'Create Deck', href: '/dashboard/create', icon: PlusCircleIcon },\n  { name: 'Study', href: '/dashboard/study', icon: BookOpenIcon },\n  { name: 'Settings', href: '/dashboard/settings', icon: Cog6ToothIcon },\n];\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const { data: session } = useSession();\n  const pathname = usePathname();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 z-50 w-full bg-white border-b border-gray-200\">\n        <div className=\"px-3 py-3 lg:px-5 lg:pl-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center justify-start\">\n              <Link href=\"/dashboard\" className=\"flex ml-2 md:mr-24\">\n                <span className=\"self-center text-xl font-semibold sm:text-2xl whitespace-nowrap text-gray-800\">\n                  42Recall\n                </span>\n              </Link>\n            </div>\n            <div className=\"flex items-center\">\n              <button\n                type=\"button\"\n                className=\"p-2 text-gray-500 rounded-lg hover:text-gray-700 hover:bg-gray-100\"\n              >\n                <BellIcon className=\"w-6 h-6\" />\n              </button>\n\n              {/* Profile dropdown */}\n              <Menu as=\"div\" className=\"relative ml-3\">\n                <div>\n                  <Menu.Button className=\"flex items-center max-w-xs gap-2 p-2 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-white\">\n                    {session?.user?.image ? (\n                      <img\n                        className=\"h-8 w-8 rounded-full\"\n                        src={session.user.image}\n                        alt=\"\"\n                      />\n                    ) : (\n                      <UserCircleIcon className=\"h-8 w-8 text-gray-400\" />\n                    )}\n                    <span className=\"hidden md:block\">{session?.user?.name}</span>\n                    <ChevronDownIcon className=\"h-5 w-5 text-gray-400\" />\n                  </Menu.Button>\n                </div>\n                <Transition\n                  as={Fragment}\n                  enter=\"transition ease-out duration-100\"\n                  enterFrom=\"transform opacity-0 scale-95\"\n                  enterTo=\"transform opacity-100 scale-100\"\n                  leave=\"transition ease-in duration-75\"\n                  leaveFrom=\"transform opacity-100 scale-100\"\n                  leaveTo=\"transform opacity-0 scale-95\"\n                >\n                  <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                    <Menu.Item>\n                      {({ active }) => (\n                        <button\n                          onClick={() => signOut({ callbackUrl: '/' })}\n                          className={clsx(\n                            active ? 'bg-gray-100' : '',\n                            'flex w-full items-center px-4 py-2 text-sm text-gray-700 gap-2'\n                          )}\n                        >\n                          <ArrowLeftOnRectangleIcon className=\"h-5 w-5\" />\n                          Sign out\n                        </button>\n                      )}\n                    </Menu.Item>\n                  </Menu.Items>\n                </Transition>\n              </Menu>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Sidebar */}\n      <aside className=\"fixed top-[3.75rem] left-0 z-40 w-64 h-screen transition-transform -translate-x-full sm:translate-x-0\">\n        <div className=\"h-full px-3 py-4 overflow-y-auto bg-white border-r border-gray-200\">\n          <ul className=\"space-y-2 font-medium\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              const isActive = pathname === item.href;\n\n              return (\n                <li key={item.name}>\n                  <Link\n                    href={item.href}\n                    className={clsx(\n                      isActive\n                        ? 'bg-gray-100 text-gray-900'\n                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900',\n                      'group flex items-center px-3 py-2 text-sm font-medium rounded-md gap-2'\n                    )}\n                  >\n                    <Icon\n                      className={clsx(\n                        isActive ? 'text-gray-900' : 'text-gray-400 group-hover:text-gray-900',\n                        'h-5 w-5 shrink-0'\n                      )}\n                    />\n                    {item.name}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </aside>\n\n      {/* Main content */}\n      <div className=\"p-4 sm:ml-64 mt-14\">\n        <div className=\"p-4 rounded-lg\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/card-skeleton.tsx",
      "content": "// app/components/decks/card-skeleton.tsx\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport function CardSkeleton() {\n  return (\n    <Card className=\"animate-pulse\">\n      <CardContent className=\"p-4 space-y-4\">\n        <div className=\"flex justify-between items-start\">\n          <div className=\"space-y-2 flex-1\">\n            <div className=\"h-4 w-32 bg-muted rounded\" />\n            <div className=\"h-4 w-3/4 bg-muted rounded\" />\n          </div>\n          <div className=\"h-8 w-8 bg-muted rounded\" />\n        </div>\n        <div className=\"space-y-2\">\n          <div className=\"h-4 w-24 bg-muted rounded\" />\n          <div className=\"h-4 w-2/3 bg-muted rounded\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/deck-card.tsx",
      "content": "// app/components/decks/deck-card.tsx\n'use client';\n\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Book, Clock, Code2, ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\nimport { Deck } from '@prisma/client';\n\ninterface DeckCardProps {\n  deck: any; // Replace with proper type when available\n}\n\nexport function DeckCard({ deck }: DeckCardProps) {\n  return (\n    <Card className=\"h-full p-6 hover:shadow-lg transition-shadow\">\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between items-start\">\n            <h3 className=\"font-semibold group-hover:text-primary\">\n              {deck.title}\n            </h3>\n            {deck.project && (\n              <span className=\"px-2 py-1 text-xs bg-secondary rounded-full\">\n                {deck.project}\n              </span>\n            )}\n          </div>\n          {deck.description && (\n            <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n              {deck.description}\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex gap-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <Book className=\"w-4 h-4\" />\n            {deck._count.cards} cards\n          </div>\n          {deck.topic && (\n            <div className=\"flex items-center gap-1\">\n              <Code2 className=\"w-4 h-4\" />\n              {deck.topic}\n            </div>\n          )}\n        </div>\n\n        {deck.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1\">\n            {deck.tags.map((tag: any) => (\n              <span \n                key={tag.id}\n                className=\"px-2 py-1 text-xs bg-muted rounded-full\"\n              >\n                {tag.name}\n              </span>\n            ))}\n          </div>\n        )}\n\n        <div className=\"flex justify-between items-center pt-4 border-t\">\n          <Link href={`/dashboard/decks/${deck.id}/study`}>\n            <Button variant=\"outline\" size=\"sm\">\n              Study Now\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </Link>\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <Clock className=\"w-4 h-4 mr-1\" />\n            {new Date(deck.updatedAt).toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/deck-details.tsx",
      "content": "// app/components/decks/deck-details.tsx\n'use client';\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Clock,\n  Book,\n  User,\n  Edit,\n  Trash2,\n  Plus,\n  Download,\n  Share2,\n  PlayCircle,\n  MoreVertical,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { ReorderableCardList } from \"./reorderable-card-list\";\nimport {\n  AddCardDialog,\n  EditDeckDialog,\n  DeleteConfirmDialog,\n  ShareDeckDialog,\n  EditCardDialog,\n} from \"@/components/dialogs\";\nimport { Card as CardType, Deck } from \"@/types/deck\";\n\ninterface DeckDetailsProps {\n  deck: Deck;\n}\n\nexport function DeckDetails({ deck: initialDeck }: DeckDetailsProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [deck, setDeck] = useState(initialDeck);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Dialog states\n  const [isAddCardOpen, setIsAddCardOpen] = useState(false);\n  const [isEditDeckOpen, setIsEditDeckOpen] = useState(false);\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false);\n  const [isShareOpen, setIsShareOpen] = useState(false);\n  const [selectedCard, setSelectedCard] = useState<CardType | null>(null);\n  const [isEditCardOpen, setIsEditCardOpen] = useState(false);\n  const [deleteCardState, setDeleteCardState] = useState<{\n    isOpen: boolean;\n    card: CardType | null;\n  }>({\n    isOpen: false,\n    card: null,\n  });\n\n  // Refresh deck data\n  const refreshDeck = async () => {\n    try {\n      const response = await fetch(`/api/decks/${deck.id}`);\n      if (!response.ok) throw new Error('Failed to fetch deck');\n      const data = await response.json();\n      // Sort cards by order before updating state\n      const sortedCards = [...data.data.cards].sort((a, b) => a.order - b.order);\n      setDeck({\n        ...data.data,\n        cards: sortedCards,\n      });\n    } catch (error) {\n      console.error('Error refreshing deck:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to refresh deck data',\n      });\n    }\n  };\n\n  // Handle deck deletion\n  const handleDeleteDeck = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/decks/${deck.id}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) throw new Error(\"Failed to delete deck\");\n\n      toast({\n        title: \"Success\",\n        description: \"Deck deleted successfully.\",\n      });\n\n      router.push(\"/dashboard/decks\");\n      router.refresh();\n    } catch (error) {\n      console.error(\"Error deleting deck:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to delete deck. Please try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle deck update\n  const handleUpdateDeck = async (updates: Partial<Deck>) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/decks/${deck.id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to update deck\");\n\n      const data = await response.json();\n      setDeck(data.data);\n\n      toast({\n        title: \"Success\",\n        description: \"Deck updated successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Error updating deck:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to update deck. Please try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // In DeckDetails component\nconst handleUpdateCard = async (cardId: string, updates: Partial<CardType>) => {\n  setIsLoading(true);\n  try {\n    // Optimistic update while preserving order\n    setDeck(prev => ({\n      ...prev,\n      cards: prev.cards.map(card => \n        card.id === cardId \n          ? { ...card, ...updates } \n          : card\n      ),\n    }));\n\n    const response = await fetch(`/api/decks/${deck.id}/cards/${cardId}`, {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updates),\n    });\n\n    if (!response.ok) throw new Error(\"Failed to update card\");\n\n    // No need to refresh the entire deck, our optimistic update is sufficient\n    toast({\n      title: \"Success\",\n      description: \"Card updated successfully.\",\n    });\n  } catch (error) {\n    console.error(\"Error updating card:\", error);\n    // Only refresh if there's an error\n    await refreshDeck();\n    toast({\n      variant: \"destructive\",\n      title: \"Error\",\n      description: \"Failed to update card. Please try again.\",\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n// Keep only this optimized version\nconst handleAddCards = async (cards: Omit<CardType, 'id' | 'deckId' | 'createdAt' | 'updatedAt' | 'order'>[]) => {\n  setIsLoading(true);\n  try {\n    const response = await fetch(`/api/decks/${deck.id}/cards`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ cards }),\n    });\n\n    if (!response.ok) throw new Error(\"Failed to add cards\");\n\n    const data = await response.json();\n    \n    // Optimistically update the deck with new cards\n    setDeck(prev => ({\n      ...prev,\n      cards: [...prev.cards, ...data.data],\n      _count: {\n        ...prev._count,\n        cards: prev._count.cards + data.data.length\n      }\n    }));\n\n    toast({\n      title: \"Success\",\n      description: `Added ${cards.length} cards successfully.`,\n    });\n\n    setIsAddCardOpen(false);\n  } catch (error) {\n    console.error(\"Error adding cards:\", error);\n    // Refresh the deck data in case of error\n    await refreshDeck();\n    toast({\n      variant: \"destructive\",\n      title: \"Error\",\n      description: \"Failed to add cards. Please try again.\",\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n  // Handle card reordering\n  const handleReorderCards = async (orderedIds: string[]) => {\n    try {\n      // Optimistic update\n      const reorderedCards = orderedIds\n        .map(id => deck.cards.find(card => card.id === id))\n        .filter((card): card is CardType => card !== undefined);\n\n      setDeck(prev => ({\n        ...prev,\n        cards: reorderedCards\n      }));\n\n      const response = await fetch(`/api/decks/${deck.id}/cards/reorder`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ orderedIds }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to reorder cards\");\n\n      await refreshDeck();\n    } catch (error) {\n      console.error(\"Error reordering cards:\", error);\n      await refreshDeck(); // Revert optimistic update\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to reorder cards. Please try again.\",\n      });\n    }\n  };\n\n\n  const deleteCard = async (cardId: string) => {\n    setIsLoading(true);\n    try {\n      // Optimistic update\n      setDeck(prev => ({\n        ...prev,\n        cards: prev.cards.filter(c => c.id !== cardId),\n        _count: {\n          ...prev._count,\n          cards: prev._count.cards - 1\n        }\n      }));\n\n      const response = await fetch(`/api/decks/${deck.id}/cards/${cardId}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) throw new Error(\"Failed to delete card\");\n\n      toast({\n        title: \"Success\",\n        description: \"Card deleted successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Error deleting card:\", error);\n      // Revert optimistic update\n      await refreshDeck();\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to delete card. Please try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n      setDeleteCardState({ isOpen: false, card: null });\n    }\n  };\n\n  // Export deck\n  const exportDeck = () => {\n    const deckData = {\n      title: deck.title,\n      description: deck.description,\n      project: deck.project,\n      topic: deck.topic,\n      cards: deck.cards.map((card) => ({\n        front: card.front,\n        back: card.back,\n        hint: card.hint,\n        code: card.code,\n      })),\n    };\n\n    const blob = new Blob([JSON.stringify(deckData, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${deck.title.toLowerCase().replace(/\\s+/g, \"-\")}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-3xl font-bold\">{deck.title}</h1>\n          {deck.description && (\n            <p className=\"text-muted-foreground\">{deck.description}</p>\n          )}\n\n          <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              <span>\n                Created {new Date(deck.createdAt).toLocaleDateString()}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Book className=\"h-4 w-4\" />\n              <span>{deck._count.cards} cards</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              <span>{deck.user.name || \"Anonymous\"}</span>\n            </div>\n          </div>\n\n          <div className=\"flex flex-wrap gap-2 pt-2\">\n            {deck.project && <Badge variant=\"secondary\">{deck.project}</Badge>}\n            {deck.topic && <Badge variant=\"outline\">{deck.topic}</Badge>}\n            {deck.tags.map((tag) => (\n              <Badge key={tag.id} variant=\"outline\">\n                {tag.name}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Button\n            onClick={() => router.push(`/dashboard/decks/${deck.id}/study`)}\n            disabled={deck.cards.length === 0}\n          >\n            <PlayCircle className=\"h-4 w-4 mr-2\" />\n            Study Now\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"icon\">\n                <MoreVertical className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={() => setIsEditDeckOpen(true)}>\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Edit Deck\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setIsAddCardOpen(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Cards\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setIsShareOpen(true)}>\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share Deck\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={exportDeck}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Deck\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                onClick={() => setIsDeleteOpen(true)}\n                className=\"text-destructive\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Delete Deck\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n\n      {/* Study Progress */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Study Progress</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <div className=\"space-y-1\">\n              <p className=\"text-2xl font-bold\">0%</p>\n              <p className=\"text-sm text-muted-foreground\">Mastery Rate</p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"text-2xl font-bold\">0</p>\n              <p className=\"text-sm text-muted-foreground\">Cards Studied</p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"text-2xl font-bold\">0</p>\n              <p className=\"text-sm text-muted-foreground\">Study Sessions</p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"text-2xl font-bold\">--</p>\n              <p className=\"text-sm text-muted-foreground\">Last Studied</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n{/* Cards Section */}\n<div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"space-y-1\">\n            <h2 className=\"text-xl font-bold\">Cards</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {deck._count.cards} cards in this deck\n            </p>\n          </div>\n          <Button onClick={() => setIsAddCardOpen(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Cards\n          </Button>\n        </div>\n\n        <ReorderableCardList\n          cards={deck.cards}\n          deckId={deck.id}\n          onEdit={card => {\n            setSelectedCard(card);\n            setIsEditCardOpen(true);\n          }}\n          onDelete={card => setDeleteCardState({ isOpen: true, card })}\n          onReorder={handleReorderCards}\n          isLoading={isLoading}\n        />\n      </div>\n\n      {/* Dialogs */}\n      <AddCardDialog\n        open={isAddCardOpen}\n        onOpenChange={setIsAddCardOpen}\n        deckId={deck.id}\n        onAddCards={handleAddCards}\n      />\n\n      <EditDeckDialog\n        open={isEditDeckOpen}\n        onOpenChange={setIsEditDeckOpen}\n        deck={deck}\n        onUpdate={handleUpdateDeck}\n      />\n\n      <DeleteConfirmDialog\n        open={isDeleteOpen}\n        onOpenChange={setIsDeleteOpen}\n        onConfirm={handleDeleteDeck}\n        title=\"Delete Deck\"\n        description=\"Are you sure you want to delete this deck? This action cannot be undone.\"\n        isLoading={isLoading}\n      />\n\n      <ShareDeckDialog\n        open={isShareOpen}\n        onOpenChange={setIsShareOpen}\n        deck={deck}\n      />\n\n      {selectedCard && (\n        <EditCardDialog\n          open={isEditCardOpen}\n          onOpenChange={(open) => {\n            setIsEditCardOpen(open);\n            if (!open) setSelectedCard(null);\n          }}\n          card={selectedCard}\n          deckId={deck.id}\n          onUpdate={handleUpdateCard}\n        />\n      )}\n\n  <DeleteConfirmDialog\n      open={deleteCardState.isOpen}\n      onOpenChange={(open) =>\n        !open && setDeleteCardState({ isOpen: false, card: null })\n      }\n      onConfirm={() =>\n        deleteCardState.card && deleteCard(deleteCardState.card.id)\n      }\n      title=\"Delete Card\"\n      description=\"Are you sure you want to delete this card? This action cannot be undone.\"\n      isLoading={isLoading}\n    />\n    </div>\n  );\n}\n\nexport default DeckDetails;"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/deck-error.tsx",
      "content": "// app/components/decks/deck-error.tsx\nimport { AlertCircle } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\n\ninterface DeckErrorProps {\n  onRetry: () => void;\n}\n\nexport function DeckError({ onRetry }: DeckErrorProps) {\n  return (\n    <Alert variant=\"destructive\">\n      <AlertCircle className=\"h-4 w-4\" />\n      <AlertTitle>Error</AlertTitle>\n      <AlertDescription className=\"flex items-center justify-between\">\n        <span>Failed to load decks. Please try again.</span>\n        <Button variant=\"outline\" size=\"sm\" onClick={onRetry}>\n          Retry\n        </Button>\n      </AlertDescription>\n    </Alert>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/deck-filters.tsx",
      "content": "// app/components/decks/deck-filters.tsx\n'use client';\n\nimport { Input } from '@/components/ui/input';\nimport { \n  Select, \n  SelectTrigger, \n  SelectValue, \n  SelectContent, \n  SelectItem \n} from '@/components/ui/select';\nimport type { DeckFilters } from '@/types/deck';\n\nconst COMMON_42_PROJECTS = [\n  'Libft',\n  'ft_printf',\n  'get_next_line',\n  'Born2beroot',\n  'FdF',\n  'minitalk',\n  'push_swap',\n  'minishell',\n  'philosophers',\n  'NetPractice',\n  'cub3d/miniRT',\n  'CPP Modules',\n  'inception',\n  'ft_irc',\n  'ft_transcendence'\n] as const;\n\nconst TOPICS = [\n  'C Functions',\n  'System Calls',\n  'Data Structures',\n  'Algorithms',\n  'Shell Commands',\n  'Networking',\n  'Memory Management',\n  'Process Management',\n  'Docker',\n  'Git Commands',\n  'Project Tips',\n  'Common Errors'\n] as const;\n\n\nconst SORT_OPTIONS = [\n  { label: 'Recently Updated', value: 'updated' },\n  { label: 'Recently Created', value: 'created' },\n  { label: 'Alphabetical', value: 'alpha' },\n  { label: 'Cards Count', value: 'cards' },\n] as const;\n\ninterface DeckFiltersProps {\n  filters: DeckFilters;\n  onChange: (filters: DeckFilters) => void;\n}\n\nexport function DeckFilters({ filters, onChange }: DeckFiltersProps) {\n  return (\n    <div className=\"flex flex-col sm:flex-row gap-2\">\n      <Input \n        placeholder=\"Search decks...\"\n        className=\"max-w-xs\"\n        value={filters.search}\n        onChange={(e) => onChange({ ...filters, search: e.target.value })}\n      />\n      \n      <Select \n        value={filters.project || 'all'} \n        onValueChange={(value) => onChange({ ...filters, project: value === 'all' ? null : value })}\n      >\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Project\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">All Projects</SelectItem>\n          {COMMON_42_PROJECTS.map((project) => (\n            <SelectItem key={project} value={project.toLowerCase()}>\n              {project}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <Select \n        value={filters.topic || 'all'} \n        onValueChange={(value) => onChange({ ...filters, topic: value === 'all' ? null : value })}\n      >\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Topic\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"all\">All Topics</SelectItem>\n          {TOPICS.map((topic) => (\n            <SelectItem key={topic} value={topic.toLowerCase()}>\n              {topic}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      <Select \n        value={filters.sortBy} \n        onValueChange={(value: any) => onChange({ ...filters, sortBy: value })}\n      >\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Sort by\" />\n        </SelectTrigger>\n        <SelectContent>\n          {SORT_OPTIONS.map((option) => (\n            <SelectItem key={option.value} value={option.value}>\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/deck-form.tsx",
      "content": "// app/components/decks/deck-form.tsx\n'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Plus, X, Upload, Eye } from 'lucide-react';\nimport { toast, useToast } from '@/components/ui/use-toast';\n\nconst COMMON_42_PROJECTS = [\n  'Libft',\n  'ft_printf',\n  'get_next_line',\n  'Born2beroot',\n  'FdF',\n  'minitalk',\n  'push_swap',\n  'minishell',\n  'philosophers',\n  'NetPractice',\n  'cub3d/miniRT',\n  'CPP Modules',\n  'inception',\n  'ft_irc',\n  'ft_transcendence'\n] as const;\n\nconst TOPICS = [\n  'C Functions',\n  'System Calls',\n  'Data Structures',\n  'Algorithms',\n  'Shell Commands',\n  'Networking',\n  'Memory Management',\n  'Process Management',\n  'Docker',\n  'Git Commands',\n  'Project Tips',\n  'Common Errors'\n] as const;\n\ninterface Card {\n  front: string;\n  back: string;\n  hint?: string;\n  code?: string;\n}\n\nexport function FortyTwoDeckForm() {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    project: '',\n    topic: '',\n    isPublic: true,\n    cards: [] as Card[]\n  });\n  const [currentCard, setCurrentCard] = useState<Card>({\n    front: '',\n    back: '',\n    hint: '',\n    code: ''\n  });\n\n  const addCard = () => {\n    if (currentCard.front && currentCard.back) {\n      setFormData(prev => ({\n        ...prev,\n        cards: [...prev.cards, currentCard]\n      }));\n      setCurrentCard({ front: '', back: '', hint: '', code: '' });\n    }\n  };\n\n  const removeCard = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      cards: prev.cards.filter((_, i) => i !== index)\n    }));\n  };\n\n// In FortyTwoDeckForm component\nconst handleSubmit = async (e: React.FormEvent) => {\n  e.preventDefault();\n  setIsLoading(true);\n\n  try {\n    if (formData.cards.length === 0) {\n      throw new Error('Add at least one card to create a deck');\n    }\n\n    const response = await fetch('/api/decks', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        title: formData.title.trim(),\n        description: formData.description.trim(),\n        project: formData.project || null,\n        topic: formData.topic || null,\n        isPublic: formData.isPublic,\n        cards: formData.cards.map(card => ({\n          front: card.front.trim(),\n          back: card.back.trim(),\n          hint: card.hint?.trim() || null,\n          code: card.code?.trim() || null\n        }))\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to create deck');\n    }\n\n    const { data } = await response.json();\n    \n    // Add toast for success\n    toast({\n      title: \"Success\",\n      description: \"Deck created successfully!\",\n    });\n\n    router.push(`/dashboard/decks/${data.id}`);\n    router.refresh();\n  } catch (error) {\n    console.error('Error creating deck:', error);\n    // Add toast for error\n    toast({\n      variant: \"destructive\",\n      title: \"Error\",\n      description: error instanceof Error ? error.message : 'Failed to create deck'\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\n  return (\n    <div className=\"space-y-6\">\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <Input\n          placeholder=\"Deck Title\"\n          value={formData.title}\n          onChange={e => setFormData(prev => ({ ...prev, title: e.target.value }))}\n          required\n        />\n        \n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <Select\n            value={formData.project}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, project: value }))}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select Project\" />\n            </SelectTrigger>\n            <SelectContent>\n              {COMMON_42_PROJECTS.map((project) => (\n                <SelectItem key={project} value={project.toLowerCase()}>\n                  {project}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select\n            value={formData.topic}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, topic: value }))}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select Topic\" />\n            </SelectTrigger>\n            <SelectContent>\n              {TOPICS.map((topic) => (\n                <SelectItem key={topic} value={topic.toLowerCase()}>\n                  {topic}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <Textarea\n          placeholder=\"Deck Description\"\n          value={formData.description}\n          onChange={e => setFormData(prev => ({ ...prev, description: e.target.value }))}\n        />\n\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            checked={formData.isPublic}\n            onCheckedChange={checked => setFormData(prev => ({ ...prev, isPublic: checked }))}\n          />\n          <label>Share with other 42 students</label>\n        </div>\n\n        {/* Card Creation */}\n        <Card>\n          <CardContent className=\"space-y-4 pt-4\">\n            <Input\n              placeholder=\"Question (e.g., What does malloc return on error?)\"\n              value={currentCard.front}\n              onChange={e => setCurrentCard(prev => ({ ...prev, front: e.target.value }))}\n            />\n            <Textarea\n              placeholder=\"Answer\"\n              value={currentCard.back}\n              onChange={e => setCurrentCard(prev => ({ ...prev, back: e.target.value }))}\n            />\n            <Input\n              placeholder=\"Hint (e.g., Think about null pointer)\"\n              value={currentCard.hint || ''}\n              onChange={e => setCurrentCard(prev => ({ ...prev, hint: e.target.value }))}\n            />\n            <Textarea\n              placeholder=\"Code Example (optional)\"\n              className=\"font-mono text-sm\"\n              value={currentCard.code || ''}\n              onChange={e => setCurrentCard(prev => ({ ...prev, code: e.target.value }))}\n            />\n            <Button\n              type=\"button\"\n              onClick={addCard}\n              disabled={!currentCard.front || !currentCard.back}\n              className=\"w-full\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Card\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Cards Preview */}\n        {formData.cards.length > 0 && (\n          <div className=\"space-y-2\">\n            <h3 className=\"font-medium\">Cards ({formData.cards.length})</h3>\n            <div className=\"space-y-2\">\n              {formData.cards.map((card, index) => (\n                <Card key={index} className=\"p-4\">\n                  <div className=\"flex justify-between\">\n                    <div className=\"space-y-2 flex-1\">\n                      <p className=\"font-medium\">{card.front}</p>\n                      <p className=\"text-sm text-muted-foreground\">{card.back}</p>\n                      {card.hint && (\n                        <p className=\"text-sm text-muted-foreground italic\">Hint: {card.hint}</p>\n                      )}\n                      {card.code && (\n                        <pre className=\"bg-muted p-2 rounded text-sm font-mono overflow-x-auto\">\n                          {card.code}\n                        </pre>\n                      )}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeCard(index)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex gap-2\">\n          <Button type=\"submit\" disabled={isLoading || formData.cards.length === 0}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Creating...\n              </>\n            ) : (\n              'Create Deck'\n            )}\n          </Button>\n        </div>\n      </form>\n\n      {formData.cards.length === 0 && (\n        <Alert>\n          <AlertDescription>\n            Start by adding cards about {formData.project || 'your chosen project'}. Include code examples and common pitfalls to help fellow 42 students!\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}\n\nexport default FortyTwoDeckForm;"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/deck-skeleton.tsx",
      "content": "// app/components/decks/deck-skeleton.tsx\nimport { Card } from \"@/components/ui/card\";\n\nexport function DeckSkeleton() {\n  return (\n    <Card className=\"h-full p-6\">\n      <div className=\"space-y-4 animate-pulse\">\n        <div className=\"flex justify-between items-start\">\n          <div className=\"h-6 w-1/2 bg-muted rounded\" />\n          <div className=\"h-6 w-16 bg-muted rounded-full\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"h-4 w-full bg-muted rounded\" />\n          <div className=\"h-4 w-2/3 bg-muted rounded\" />\n        </div>\n\n        <div className=\"flex gap-4\">\n          <div className=\"h-4 w-20 bg-muted rounded\" />\n          <div className=\"h-4 w-20 bg-muted rounded\" />\n        </div>\n\n        <div className=\"flex gap-2\">\n          <div className=\"h-6 w-16 bg-muted rounded-full\" />\n          <div className=\"h-6 w-16 bg-muted rounded-full\" />\n        </div>\n\n        <div className=\"flex justify-between items-center pt-4 border-t\">\n          <div className=\"h-8 w-24 bg-muted rounded\" />\n          <div className=\"h-4 w-32 bg-muted rounded\" />\n        </div>\n      </div>\n    </Card>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/decks/reorderable-card-list.tsx",
      "content": "// app/components/decks/reorderable-card-list.tsx\n'use client';\n\nimport {\n  DndContext,\n  DragEndEvent,\n  MouseSensor,\n  TouchSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MoreVertical, GripVertical } from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Card as CardType } from '@/types/deck';\nimport { CardSkeleton } from './card-skeleton';\n\ninterface SortableCardProps {\n  card: CardType;\n  index: number;\n  onEdit: (card: CardType) => void;\n  onDelete: (card: CardType) => void;\n  isLoading?: boolean;\n}\n\nfunction SortableCard({\n  card,\n  index,\n  onEdit,\n  onDelete,\n  isLoading,\n}: SortableCardProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: card.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  if (isLoading) {\n    return <CardSkeleton />;\n  }\n\n  return (\n    <div ref={setNodeRef} style={style}>\n      <Card className=\"mb-4\">\n        <CardContent className=\"p-4 space-y-4\">\n          <div className=\"flex justify-between items-start\">\n            <div\n              {...attributes}\n              {...listeners}\n              className=\"cursor-grab active:cursor-grabbing p-1\"\n            >\n              <GripVertical className=\"h-5 w-5 text-muted-foreground\" />\n            </div>\n            <div className=\"flex-1 px-4\">\n              <p className=\"font-medium\">Question {index + 1}</p>\n              <p>{card.front}</p>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onEdit(card)}>\n                  Edit Card\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => onDelete(card)}\n                  className=\"text-destructive\"\n                >\n                  Delete Card\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <div className=\"space-y-1\">\n            <p className=\"font-medium\">Answer</p>\n            <p className=\"text-muted-foreground\">{card.back}</p>\n          </div>\n\n          {card.hint && (\n            <div className=\"space-y-1\">\n              <p className=\"font-medium\">Hint</p>\n              <p className=\"text-sm text-muted-foreground italic\">{card.hint}</p>\n            </div>\n          )}\n\n          {card.code && (\n            <div className=\"space-y-1\">\n              <p className=\"font-medium\">Code Example</p>\n              <pre className=\"bg-muted p-2 rounded text-sm font-mono overflow-x-auto\">\n                {card.code}\n              </pre>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ninterface ReorderableCardListProps {\n  cards: CardType[];\n  deckId: string;\n  onEdit: (card: CardType) => void;\n  onDelete: (card: CardType) => void;\n  onReorder?: (orderedIds: string[]) => void;\n  isLoading?: boolean;\n}\n\nexport function ReorderableCardList({\n  cards,\n  deckId,\n  onEdit,\n  onDelete,\n  onReorder,\n  isLoading,\n}: ReorderableCardListProps) {\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 200,\n        tolerance: 8,\n      },\n    })\n  );\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      const oldIndex = cards.findIndex((card) => card.id === active.id);\n      const newIndex = cards.findIndex((card) => card.id === over.id);\n      \n      const newOrder = arrayMove(\n        cards.map((card) => card.id),\n        oldIndex,\n        newIndex\n      );\n\n      onReorder?.(newOrder);\n    }\n  };\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        No cards yet. Add some cards to get started!\n      </div>\n    );\n  }\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={handleDragEnd}\n    >\n      <SortableContext\n        items={cards.map((card) => card.id)}\n        strategy={verticalListSortingStrategy}\n      >\n        {cards.map((card, index) => (\n          <SortableCard\n            key={card.id}\n            card={card}\n            index={index}\n            onEdit={onEdit}\n            onDelete={onDelete}\n            isLoading={isLoading}\n          />\n        ))}\n      </SortableContext>\n    </DndContext>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dialogs/add-card-dialog.tsx",
      "content": "// app/components/dialogs/add-card-dialog.tsx\n'use client';\n\nimport { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Loader2, Plus } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { Card } from '@/types/deck';\n\ntype NewCard = Omit<Card, 'id' | 'order' | 'deckId' | 'createdAt' | 'updatedAt'>;\n\ninterface AddCardDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  deckId: string;\n  onAddCards: (cards: NewCard[]) => Promise<void>;\n}\n\ninterface CardFormData {\n  front: string;\n  back: string;\n  hint: string;\n  code: string;\n}\n\nexport function AddCardDialog({\n  open,\n  onOpenChange,\n  deckId,\n  onAddCards,\n}: AddCardDialogProps) {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [cards, setCards] = useState<CardFormData[]>([\n    { front: '', back: '', hint: '', code: '' }\n  ]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // Filter and transform cards\n      const validCards: NewCard[] = cards\n        .filter(card => card.front.trim() && card.back.trim())\n        .map(card => ({\n          front: card.front.trim(),\n          back: card.back.trim(),\n          hint: card.hint.trim() || null,\n          code: card.code.trim() || null\n        }));\n      \n      if (validCards.length === 0) {\n        throw new Error('At least one card is required');\n      }\n\n      await onAddCards(validCards);\n      \n      // Reset form\n      setCards([{ front: '', back: '', hint: '', code: '' }]);\n      onOpenChange(false);\n\n      toast({\n        title: 'Success',\n        description: `Added ${validCards.length} cards successfully.`,\n      });\n    } catch (error) {\n      console.error('Error adding cards:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to add cards',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addCard = () => {\n    setCards([...cards, { front: '', back: '', hint: '', code: '' }]);\n  };\n\n  const updateCard = (index: number, field: keyof CardFormData, value: string) => {\n    setCards(cards.map((card, i) => \n      i === index ? { ...card, [field]: value } : card\n    ));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle>Add Cards</DialogTitle>\n          <DialogDescription>\n            Add new cards to your deck. Each card needs a front (question) and back (answer).\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"flex flex-col flex-1\">\n          <div className=\"space-y-4 overflow-y-auto flex-1 pr-6 -mr-6\">\n            {cards.map((card, index) => (\n              <div key={index} className=\"space-y-2 p-4 border rounded-lg\">\n                <Input\n                  placeholder=\"Question\"\n                  value={card.front}\n                  onChange={(e) => updateCard(index, 'front', e.target.value)}\n                  required\n                />\n                <Textarea\n                  placeholder=\"Answer\"\n                  value={card.back}\n                  onChange={(e) => updateCard(index, 'back', e.target.value)}\n                  required\n                />\n                <Input\n                  placeholder=\"Hint (optional)\"\n                  value={card.hint}\n                  onChange={(e) => updateCard(index, 'hint', e.target.value)}\n                />\n                <Textarea\n                  placeholder=\"Code Example (optional)\"\n                  value={card.code}\n                  onChange={(e) => updateCard(index, 'code', e.target.value)}\n                  className=\"font-mono\"\n                />\n              </div>\n            ))}\n\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={addCard}\n              className=\"w-full\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Another Card\n            </Button>\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4 border-t mt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Adding...\n                </>\n              ) : (\n                'Save Cards'\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dialogs/delete-confirm-dialog.tsx",
      "content": "// app/components/dialogs/delete-confirm-dialog.tsx\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Trash2 } from 'lucide-react';\n\ninterface DeleteConfirmDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  title: string;\n  description: string;\n  isLoading?: boolean;\n}\n\nexport function DeleteConfirmDialog({\n  open,\n  onOpenChange,\n  onConfirm,\n  title,\n  description,\n  isLoading\n}: DeleteConfirmDialogProps) {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"flex items-center gap-2\">\n            <Trash2 className=\"h-5 w-5 text-destructive\" />\n            {title}\n          </AlertDialogTitle>\n          <AlertDialogDescription>\n            {description}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading}>Cancel</AlertDialogCancel>\n          <AlertDialogAction \n            onClick={onConfirm}\n            disabled={isLoading}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            Delete\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dialogs/edit-card-dialog.tsx",
      "content": "// app/components/dialogs/edit-card-dialog.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';  // Add useEffect here\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Loader2 } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { Card as CardType } from '@/types/deck';\n\ninterface EditCardDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  card: CardType;\n  deckId: string;\n  onUpdate: (cardId: string, updates: Partial<CardType>) => Promise<void>;\n}\n\nexport function EditCardDialog({\n  open,\n  onOpenChange,\n  card,\n  deckId,\n  onUpdate\n}: EditCardDialogProps) {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  // Initialize formData with the card's current values\n  const [formData, setFormData] = useState({\n    front: card.front,\n    back: card.back,\n    hint: card.hint || '',\n    code: card.code || '',\n  });\n\n  // Reset form when card changes\n  useEffect(() => {\n    setFormData({\n      front: card.front,\n      back: card.back,\n      hint: card.hint || '',\n      code: card.code || '',\n    });\n  }, [card]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await onUpdate(card.id, {\n        front: formData.front.trim(),\n        back: formData.back.trim(),\n        hint: formData.hint.trim() || null,\n        code: formData.code.trim() || null,\n      });\n\n      toast({\n        title: 'Success',\n        description: 'Card updated successfully.',\n      });\n\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Error updating card:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to update card. Please try again.',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Card</DialogTitle>\n          <DialogDescription>\n            Make changes to your flashcard.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"front\" className=\"text-sm font-medium\">\n                Question\n              </label>\n              <Input\n                id=\"front\"\n                value={formData.front}\n                onChange={e => setFormData(prev => ({ ...prev, front: e.target.value }))}\n                required\n                placeholder=\"Enter the question or front of the card\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"back\" className=\"text-sm font-medium\">\n                Answer\n              </label>\n              <Textarea\n                id=\"back\"\n                value={formData.back}\n                onChange={e => setFormData(prev => ({ ...prev, back: e.target.value }))}\n                required\n                placeholder=\"Enter the answer or back of the card\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"hint\" className=\"text-sm font-medium\">\n                Hint (Optional)\n              </label>\n              <Input\n                id=\"hint\"\n                value={formData.hint}\n                onChange={e => setFormData(prev => ({ ...prev, hint: e.target.value }))}\n                placeholder=\"Add a helpful hint\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"code\" className=\"text-sm font-medium\">\n                Code Example (Optional)\n              </label>\n              <Textarea\n                id=\"code\"\n                value={formData.code}\n                onChange={e => setFormData(prev => ({ ...prev, code: e.target.value }))}\n                placeholder=\"Add a code example\"\n                className=\"font-mono\"\n                rows={4}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                'Save Changes'\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dialogs/edit-deck-dialog.tsx",
      "content": "// app/components/dialogs/edit-deck-dialog.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Loader2 } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { Deck } from '@/types/deck';  // Add this import\n\nconst COMMON_42_PROJECTS = [\n  'Libft',\n  'ft_printf',\n  'get_next_line',\n  'Born2beroot',\n  'FdF',\n  'minitalk',\n  'push_swap',\n  'minishell',\n  'philosophers',\n  'NetPractice',\n  'cub3d/miniRT',\n  'CPP Modules',\n  'inception',\n  'ft_irc',\n  'ft_transcendence'\n] as const;\n\nconst TOPICS = [\n  'C Functions',\n  'System Calls',\n  'Data Structures',\n  'Algorithms',\n  'Shell Commands',\n  'Networking',\n  'Memory Management',\n  'Process Management',\n  'Docker',\n  'Git Commands',\n  'Project Tips',\n  'Common Errors'\n] as const;\n\ninterface EditDeckDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  deck: Deck;\n  onUpdate: (updates: Partial<Deck>) => Promise<void>;\n}\n\nexport function EditDeckDialog({ \n  open, \n  onOpenChange, \n  deck,\n  onUpdate \n}: EditDeckDialogProps) {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    title: deck.title,\n    description: deck.description || '',\n    project: deck.project || 'none',\n    topic: deck.topic || 'none',\n    isPublic: deck.isPublic,\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await onUpdate({\n        title: formData.title.trim(),\n        description: formData.description.trim() || null,\n        project: formData.project === 'none' ? null : formData.project,\n        topic: formData.topic === 'none' ? null : formData.topic,\n        isPublic: formData.isPublic,\n      });\n\n      toast({\n        title: 'Success',\n        description: 'Deck updated successfully.',\n      });\n\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Error updating deck:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to update deck',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Edit Deck</DialogTitle>\n          <DialogDescription>\n            Update your deck's information.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            placeholder=\"Deck Title\"\n            value={formData.title}\n            onChange={e => setFormData(prev => ({ ...prev, title: e.target.value }))}\n            required\n          />\n          \n          <Select\n            value={formData.project}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, project: value }))}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select Project\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"none\">No Project</SelectItem>\n              {COMMON_42_PROJECTS.map((project) => (\n                <SelectItem key={project} value={project.toLowerCase()}>\n                  {project}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select\n            value={formData.topic}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, topic: value }))}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select Topic\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"none\">No Topic</SelectItem>\n              {TOPICS.map((topic) => (\n                <SelectItem key={topic} value={topic.toLowerCase()}>\n                  {topic}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Textarea\n            placeholder=\"Deck Description\"\n            value={formData.description}\n            onChange={e => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          />\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              checked={formData.isPublic}\n              onCheckedChange={checked => setFormData(prev => ({ ...prev, isPublic: checked }))}\n            />\n            <label>Make deck public</label>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                'Save Changes'\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default EditDeckDialog;"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dialogs/index.ts",
      "content": "// app/components/dialogs/index.ts\nexport * from './add-card-dialog';\nexport * from './edit-card-dialog';\nexport * from './edit-deck-dialog';\nexport * from './delete-confirm-dialog';\nexport * from './share-deck-dialog';"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/dialogs/share-deck-dialog.tsx",
      "content": "// app/components/dialogs/share-deck-dialog.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport { Check, Copy, Link as LinkIcon } from 'lucide-react';\n\ninterface ShareDeckDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  deck: any;\n}\n\nexport function ShareDeckDialog({ open, onOpenChange, deck }: ShareDeckDialogProps) {\n  const [copied, setCopied] = useState(false);\n  const [shareUrl, setShareUrl] = useState('');\n\n  // Set the share URL after component mounts\n  useEffect(() => {\n    setShareUrl(`${window.location.origin}/decks/${deck.id}`);\n  }, [deck.id]);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text:', err);\n    }\n  };\n\n  if (!shareUrl) return null; // Don't render until shareUrl is set\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Share Deck</DialogTitle>\n          <DialogDescription>\n            Share your deck with other 42 students\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <div>Public Access</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Allow anyone with the link to view this deck\n              </div>\n            </div>\n            <Switch checked={deck.isPublic} disabled />\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <Input\n              value={shareUrl}\n              readOnly\n              className=\"font-mono text-sm\"\n            />\n            <Button\n              size=\"icon\"\n              onClick={copyToClipboard}\n              variant=\"outline\"\n            >\n              {copied ? (\n                <Check className=\"h-4 w-4 text-green-500\" />\n              ) : (\n                <Copy className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h4 className=\"text-sm font-medium\">Share via</h4>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <LinkIcon className=\"h-4 w-4 mr-2\" />\n                Copy Link\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/providers/auth-provider.tsx",
      "content": "// app/components/providers/auth-provider.tsx\n'use client'\n\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function AuthProvider({ children }: { children: React.ReactNode }) {\n  return <SessionProvider>{children}</SessionProvider>\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/providers/toast-provider.tsx",
      "content": "// app/components/providers/toast-provider.tsx\n'use client';\n\nimport { Toaster } from '@/components/ui/toaster';\n\nexport function ToastProvider() {\n  return <Toaster />;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/study/study-dashboard.tsx",
      "content": "// app/components/study/study-dashboard.tsx\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport {\n  BookOpen,\n  Clock,\n  Award,\n  Calendar,\n  BarChart2,\n  PlayCircle,\n  ChevronRight,\n} from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\n\ninterface StudyDashboardProps {\n  data: {\n    decks: any[];\n    recentSessions: any[];\n    stats: {\n      _count: { _all: number };\n      _sum: { cardsStudied: number };\n    };\n  };\n}\n\nexport function StudyDashboard({ data }: StudyDashboardProps) {\n  const router = useRouter();\n\n  // Calculate study streak and other stats\n  const totalSessions = data.stats._count._all;\n  const totalCardsStudied = data.stats._sum.cardsStudied || 0;\n  const averageCardsPerSession = totalSessions\n    ? Math.round(totalCardsStudied / totalSessions)\n    : 0;\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Study Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Track your progress and continue learning\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between space-x-4\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Total Sessions\n                </p>\n                <p className=\"text-2xl font-bold\">{totalSessions}</p>\n              </div>\n              <Calendar className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between space-x-4\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Cards Studied\n                </p>\n                <p className=\"text-2xl font-bold\">{totalCardsStudied}</p>\n              </div>\n              <BookOpen className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between space-x-4\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Avg. Cards/Session\n                </p>\n                <p className=\"text-2xl font-bold\">{averageCardsPerSession}</p>\n              </div>\n              <BarChart2 className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between space-x-4\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  Current Streak\n                </p>\n                <p className=\"text-2xl font-bold\">0 days</p>\n              </div>\n              <Award className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Decks Ready for Review */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Ready for Review</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {data.decks.map((deck) => {\n              const totalCards = deck._count.cards;\n              const studiedCards = deck.cards.filter(\n                (card: any) => card.progress.length > 0\n              ).length;\n              const progress = (studiedCards / totalCards) * 100;\n\n              return (\n                <div\n                  key={deck.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                >\n                  <div className=\"space-y-1\">\n                    <h3 className=\"font-medium\">{deck.title}</h3>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {deck.project && (\n                        <span className=\"mr-2\">{deck.project}</span>\n                      )}\n                      {deck.topic && <span>{deck.topic}</span>}\n                    </div>\n                    <div className=\"w-48\">\n                      <Progress value={progress} className=\"h-2\" />\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => router.push(`/dashboard/decks/${deck.id}/study`)}\n                  >\n                    <PlayCircle className=\"h-4 w-4 mr-2\" />\n                    Study Now\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Study Sessions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Sessions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {data.recentSessions.map((session) => (\n              <div\n                key={session.id}\n                className=\"flex items-center justify-between p-4 border rounded-lg\"\n              >\n                <div className=\"space-y-1\">\n                  <h3 className=\"font-medium\">{session.deck.title}</h3>\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <Clock className=\"h-4 w-4 mr-1\" />\n                    {new Date(session.startTime).toLocaleDateString()}\n                    <span className=\"mx-2\">•</span>\n                    {session.cardsStudied} cards studied\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => router.push(`/dashboard/decks/${session.deckId}/study`)}\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/study/study-session.tsx",
      "content": "// app/components/study/study-session.tsx\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  RotateCcw,\n  ThumbsUp,\n  ThumbsDown,\n  Lightbulb,\n  Code,\n  Eye,\n} from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { Deck } from '@/types/deck';\n\ninterface StudySessionProps {\n  deck: Deck;\n}\n\nexport function StudySession({ deck }: StudySessionProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [showHint, setShowHint] = useState(false);\n  const [showCode, setShowCode] = useState(false);\n  const [sessionStats, setSessionStats] = useState({\n    correct: 0,\n    incorrect: 0,\n    startTime: new Date(),\n    cardsStudied: new Set<string>(),\n  });\n\n  const currentCard = deck.cards[currentIndex];\n  const progress = (currentIndex / deck.cards.length) * 100;\n\n  const handleResponse = async (isCorrect: boolean) => {\n    try {\n      // Record the response\n      await fetch(`/api/decks/${deck.id}/cards/${currentCard.id}/study`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isCorrect }),\n      });\n\n      // Update stats\n      setSessionStats(prev => ({\n        ...prev,\n        correct: prev.correct + (isCorrect ? 1 : 0),\n        incorrect: prev.incorrect + (isCorrect ? 0 : 1),\n        cardsStudied: new Set(prev.cardsStudied).add(currentCard.id),\n      }));\n\n      // Move to next card\n      if (currentIndex < deck.cards.length - 1) {\n        setCurrentIndex(prev => prev + 1);\n        setShowAnswer(false);\n        setShowHint(false);\n        setShowCode(false);\n      } else {\n        // End session\n        await endSession();\n      }\n    } catch (error) {\n      console.error('Error recording response:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to record response',\n      });\n    }\n  };\n\n  const endSession = async () => {\n    try {\n      await fetch(`/api/decks/${deck.id}/study-sessions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          startTime: sessionStats.startTime,\n          endTime: new Date(),\n          cardsStudied: sessionStats.cardsStudied.size,\n          correctAnswers: sessionStats.correct,\n          incorrectAnswers: sessionStats.incorrect,\n        }),\n      });\n\n      toast({\n        title: 'Study Session Complete!',\n        description: `You studied ${sessionStats.cardsStudied.size} cards with ${sessionStats.correct} correct answers.`,\n      });\n\n      router.push(`/dashboard/decks/${deck.id}`);\n    } catch (error) {\n      console.error('Error ending session:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to save study session',\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <Button\n          variant=\"outline\"\n          onClick={() => router.push(`/dashboard/decks/${deck.id}`)}\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Deck\n        </Button>\n        <div className=\"text-sm text-muted-foreground\">\n          Card {currentIndex + 1} of {deck.cards.length}\n        </div>\n      </div>\n\n      {/* Progress */}\n      <Progress value={progress} className=\"h-2\" />\n\n      {/* Card */}\n      <Card className=\"min-h-[400px]\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-6\">\n            {/* Front */}\n            <div className=\"space-y-4\">\n              <h2 className=\"text-xl font-semibold\">{currentCard.front}</h2>\n              \n              {currentCard.hint && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowHint(!showHint)}\n                >\n                  <Lightbulb className=\"h-4 w-4 mr-2\" />\n                  {showHint ? 'Hide Hint' : 'Show Hint'}\n                </Button>\n              )}\n\n              {showHint && currentCard.hint && (\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">{currentCard.hint}</p>\n                </div>\n              )}\n            </div>\n\n            {/* Answer */}\n            {showAnswer && (\n              <div className=\"space-y-4 pt-4 border-t\">\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-medium\">Answer:</h3>\n                  <p>{currentCard.back}</p>\n                </div>\n\n                {currentCard.code && (\n                  <div className=\"space-y-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowCode(!showCode)}\n                    >\n                      <Code className=\"h-4 w-4 mr-2\" />\n                      {showCode ? 'Hide Code' : 'Show Code'}\n                    </Button>\n\n                    {showCode && (\n                      <pre className=\"p-4 bg-muted rounded-lg font-mono text-sm overflow-x-auto\">\n                        {currentCard.code}\n                      </pre>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex justify-center gap-4 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => handleResponse(false)}\n                    className=\"w-32\"\n                  >\n                    <ThumbsDown className=\"h-4 w-4 mr-2\" />\n                    Incorrect\n                  </Button>\n                  <Button\n                    onClick={() => handleResponse(true)}\n                    className=\"w-32\"\n                  >\n                    <ThumbsUp className=\"h-4 w-4 mr-2\" />\n                    Correct\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {!showAnswer && (\n              <div className=\"flex justify-center pt-4\">\n                <Button\n                  onClick={() => setShowAnswer(true)}\n                  className=\"w-48\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Show Answer\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"flex justify-between items-center text-sm text-muted-foreground\">\n        <div>\n          Correct: {sessionStats.correct} | Incorrect: {sessionStats.incorrect}\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => router.push(`/dashboard/decks/${deck.id}`)}\n        >\n          <RotateCcw className=\"h-4 w-4 mr-2\" />\n          End Session\n        </Button>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/alert-dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/alert.tsx",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/badge.tsx",
      "content": "// app/components/ui/badge.tsx\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/pagination.tsx",
      "content": "// app/components/ui/pagination.tsx\nimport { Button } from '@/components/ui/button';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { PaginationState } from '@/types/deck';\n\ninterface PaginationProps {\n  pagination: PaginationState;\n  onChange: (page: number) => void;\n}\n\nexport function Pagination({ pagination, onChange }: PaginationProps) {\n  const { page, pages } = pagination;\n\n  return (\n    <div className=\"flex items-center justify-center gap-2\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => onChange(page - 1)}\n        disabled={page <= 1}\n      >\n        <ChevronLeft className=\"h-4 w-4\" />\n        Previous\n      </Button>\n      \n      <div className=\"text-sm text-muted-foreground\">\n        Page {page} of {pages}\n      </div>\n\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => onChange(page + 1)}\n        disabled={page >= pages}\n      >\n        Next\n        <ChevronRight className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/progress.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/switch.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/textarea.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/toast.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/toaster.tsx",
      "content": "// app/components/ui/toaster.tsx\n\"use client\"\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/components/ui/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/components/ui/use-toast.ts",
      "content": "// app/components/ui/use-toast.ts\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/contexts/deck-context.tsx",
      "content": "// app/contexts/deck-context.tsx\n'use client';\n\nimport { createContext, useContext, useReducer, ReactNode } from 'react';\n\ninterface DeckState {\n  decks: any[];\n  isLoading: boolean;\n  error: string | null;\n  filters: {\n    search: string;\n    project: string | null;\n    topic: string | null;\n    sortBy: 'updated' | 'created' | 'alpha' | 'cards';\n  };\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\ntype DeckAction =\n  | { type: 'SET_DECKS'; payload: any[] }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_FILTERS'; payload: Partial<DeckState['filters']> }\n  | { type: 'SET_PAGINATION'; payload: Partial<DeckState['pagination']> };\n\nconst DeckContext = createContext<{\n  state: DeckState;\n  dispatch: React.Dispatch<DeckAction>;\n} | null>(null);\n\nconst initialState: DeckState = {\n  decks: [],\n  isLoading: false,\n  error: null,\n  filters: {\n    search: '',\n    project: null,\n    topic: null,\n    sortBy: 'updated'\n  },\n  pagination: {\n    page: 1,\n    limit: 12,\n    total: 0,\n    pages: 0\n  }\n};\n\nfunction deckReducer(state: DeckState, action: DeckAction): DeckState {\n  switch (action.type) {\n    case 'SET_DECKS':\n      return { ...state, decks: action.payload };\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SET_FILTERS':\n      return { \n        ...state, \n        filters: { ...state.filters, ...action.payload },\n        pagination: { ...state.pagination, page: 1 }\n      };\n    case 'SET_PAGINATION':\n      return { \n        ...state, \n        pagination: { ...state.pagination, ...action.payload }\n      };\n    default:\n      return state;\n  }\n}\n\nexport function DeckProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(deckReducer, initialState);\n\n  return (\n    <DeckContext.Provider value={{ state, dispatch }}>\n      {children}\n    </DeckContext.Provider>\n  );\n}\n\nexport function useDeck() {\n  const context = useContext(DeckContext);\n  if (!context) {\n    throw new Error('useDeck must be used within a DeckProvider');\n  }\n  return context;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/globals.css",
      "content": "/* app/globals.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n \n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n \n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/layout.tsx",
      "content": "// app/layout.tsx\nimport './globals.css'\nimport { Inter } from 'next/font/google'\nimport AuthProvider from './components/providers/auth-provider'\nimport { ToastProvider } from '@/components/providers/toast-provider';\nimport { Toaster } from \"@/components/ui/toaster\"\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata = {\n  title: '42Recall',\n  description: 'Flashcard app for 42 students',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <AuthProvider>\n          {children}\n          <Toaster />\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/lib/auth.ts",
      "content": "// app/lib/auth.ts\nimport type { NextAuthOptions } from \"next-auth\"\nimport FortyTwoProvider from \"next-auth/providers/42-school\"\nimport { CustomPrismaAdapter } from \"./custom-prisma-adapter\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: CustomPrismaAdapter(),\n  providers: [\n    FortyTwoProvider({\n      clientId: process.env.FORTYTWO_CLIENT_ID!,\n      clientSecret: process.env.FORTYTWO_CLIENT_SECRET!,\n      profile(profile) {\n        return {\n          id: profile.id.toString(),\n          name: profile.login || profile.name,\n          email: profile.email,\n          image: profile.image?.versions?.small || profile.image?.link\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async session({ session, token, user }) {\n      if (session.user) {\n        session.user.id = token.sub ?? user.id;\n      }\n      return session;\n    },\n    async jwt({ token, account, profile }) {\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n      return token;\n    },\n    async redirect({ url, baseUrl }) {\n      // Handle relative URLs\n      if (url.startsWith('/')) {\n        return `${baseUrl}${url}`\n      }\n      // Handle absolute URLs on the same origin\n      if (new URL(url).origin === baseUrl) {\n        return url\n      }\n      // Default fallback\n      return baseUrl\n    },\n  },\n  pages: {\n    signIn: '/auth/signin',\n    error: '/auth/error',\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  debug: process.env.NODE_ENV === 'development',\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/lib/custom-prisma-adapter.ts",
      "content": "// app/lib/custom-prisma-adapter.ts\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"./prisma\"\n\nexport function CustomPrismaAdapter(p = prisma) {\n  const adapter = PrismaAdapter(p)\n  \n  return {\n    ...adapter,\n    createUser: adapter.createUser,\n    getUser: adapter.getUser,\n    getUserByEmail: adapter.getUserByEmail,\n    async linkAccount(rawData: any) {\n      const {\n        created_at,\n        secret_valid_until,\n        ...accountData\n      } = rawData\n\n      const data = {\n        id: accountData.id ?? undefined,\n        userId: accountData.userId,\n        type: accountData.type,\n        provider: accountData.provider,\n        providerAccountId: accountData.providerAccountId,\n        refresh_token: accountData.refresh_token ?? undefined,\n        access_token: accountData.access_token ?? undefined,\n        expires_at: accountData.expires_at ?? undefined,\n        token_type: accountData.token_type ?? undefined,\n        scope: accountData.scope ?? undefined,\n        id_token: accountData.id_token ?? undefined,\n        session_state: accountData.session_state ?? undefined,\n      }\n\n      try {\n        const account = await p.account.create({\n          data,\n        })\n        return account\n      } catch (error) {\n        console.error(\"Error creating account:\", error)\n        throw error\n      }\n    },\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/lib/prisma.ts",
      "content": "// app/lib/prisma.ts\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/lib/transformers.ts",
      "content": "// app/lib/transformers.ts\nimport { Deck, Card, User, Tag } from '@/types/deck';\n\nexport function transformPrismaDeckToApp(prismaDeck: any): Deck {\n  return {\n    id: prismaDeck.id,\n    title: prismaDeck.title,\n    description: prismaDeck.description,\n    project: prismaDeck.project,\n    topic: prismaDeck.topic,\n    isPublic: prismaDeck.isPublic,\n    userId: prismaDeck.userId,\n    user: {\n      id: prismaDeck.user.id,\n      name: prismaDeck.user.name,\n      image: prismaDeck.user.image,\n    },\n    cards: prismaDeck.cards.map((card: any) => ({\n      id: card.id,\n      front: card.front,\n      back: card.back,\n      hint: card.hint,\n      code: card.code,\n      order: card.order,\n      deckId: card.deckId,\n      createdAt: card.createdAt.toISOString(),\n      updatedAt: card.updatedAt.toISOString(),\n    })),\n    tags: prismaDeck.tags,\n    createdAt: prismaDeck.createdAt.toISOString(),\n    updatedAt: prismaDeck.updatedAt.toISOString(),\n    _count: {\n      cards: prismaDeck._count.cards\n    }\n  };\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/lib/utils.ts",
      "content": "// lib/utils.ts\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { Deck } from '@/types/deck';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function convertPrismaDatesToStrings<T>(obj: T): T {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (obj instanceof Date) {\n    return obj.toISOString() as unknown as T;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(convertPrismaDatesToStrings) as unknown as T;\n  }\n\n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      converted[key] = convertPrismaDatesToStrings(value);\n    }\n    return converted;\n  }\n\n  return obj;\n}\n\n\nexport function transformPrismaDeckToApp(prismaDeck: any): Deck {\n  return {\n    id: prismaDeck.id,\n    title: prismaDeck.title,\n    description: prismaDeck.description,\n    project: prismaDeck.project,\n    topic: prismaDeck.topic,\n    isPublic: prismaDeck.isPublic,\n    userId: prismaDeck.userId,\n    user: {\n      id: prismaDeck.user.id,\n      name: prismaDeck.user.name,\n      image: prismaDeck.user.image,\n    },\n    cards: prismaDeck.cards.map((card: any) => ({\n      id: card.id,\n      front: card.front,\n      back: card.back,\n      hint: card.hint,\n      code: card.code,\n      order: card.order,\n      deckId: card.deckId,\n      createdAt: card.createdAt.toISOString(),\n      updatedAt: card.updatedAt.toISOString(),\n    })),\n    tags: prismaDeck.tags,\n    createdAt: prismaDeck.createdAt.toISOString(),\n    updatedAt: prismaDeck.updatedAt.toISOString(),\n    _count: {\n      cards: prismaDeck._count.cards\n    }\n  };\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/app/page.tsx",
      "content": "import { LoginButton } from './components/auth/login-button';\nimport { Button } from \"@/components/ui/button\";\nimport { Brain, Zap, Users } from 'lucide-react';\n\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-blue-900 text-white flex items-center justify-center p-4\">\n      <div className=\"max-w-5xl w-full mx-auto grid md:grid-cols-2 gap-8 items-center\">\n        {/* Text Section */}\n        <div className=\"space-y-6\">\n          <h1 className=\"text-5xl font-extrabold tracking-tight leading-tight\">\n            Master 42 with\n            <span className=\"block text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-blue-600\">\n              42Recall\n            </span>\n          </h1>\n          <p className=\"text-xl text-gray-300\">\n            Elevate your coding skills using our advanced spaced repetition system tailored for 42 School students.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <LoginButton />\n          </div>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 bg-blue-500 rounded-full filter blur-3xl opacity-30 animate-pulse\"></div>\n          <div className=\"relative bg-gray-800 rounded-2xl p-6 shadow-2xl transition-transform transform hover:scale-105\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              {[\n                { icon: Brain, title: \"Optimized Learning\", description: \"Scientifically proven spaced repetition\" },\n                { icon: Zap, title: \"Quick Recall\", description: \"Boost your coding memory retention\" },\n                { icon: Users, title: \"Peer Learning\", description: \"Share and collaborate on flashcard decks\" },\n                { icon: Users, title: \"42 Focused\", description: \"Content tailored for 42 School curriculum\" },\n              ].map((feature, index) => (\n                <div key={index} className=\"flex flex-col items-center text-center p-4 bg-gray-700 rounded-lg transition-transform transform hover:scale-105\">\n                  <feature.icon className=\"w-12 h-12 text-blue-400 mb-2 transition-colors hover:text-blue-300\" />\n                  <h3 className=\"font-semibold mb-1 text-lg\">{feature.title}</h3>\n                  <p className=\"text-sm text-gray-300\">{feature.description}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/components.json",
      "content": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/hooks/use-deck.ts",
      "content": "// app/hooks/use-deck.ts\nimport { useState, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from '@/components/ui/use-toast';\nimport { Card, Deck } from '@/types/deck';\n\nexport function useDeck(initialDeck: Deck) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [deck, setDeck] = useState(initialDeck);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const refreshDeck = useCallback(async () => {\n    try {\n      const response = await fetch(`/api/decks/${deck.id}`);\n      if (!response.ok) throw new Error('Failed to fetch deck');\n      const data = await response.json();\n      setDeck(data.data);\n    } catch (error) {\n      console.error('Error refreshing deck:', error);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to refresh deck data',\n      });\n    }\n  }, [deck.id, toast]);\n\n  const updateDeck = useCallback(async (updates: Partial<Deck>) => {\n    setIsLoading(true);\n    try {\n      // Optimistic update with _count preservation\n      setDeck(prev => ({\n        ...prev,\n        ...updates,\n        _count: prev._count // Preserve the count\n      }));\n\n      const response = await fetch(`/api/decks/${deck.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) throw new Error('Failed to update deck');\n\n      const data = await response.json();\n      \n      // Update with server data, preserving _count if not provided\n      setDeck(prev => ({\n        ...prev,\n        ...data.data,\n        _count: data.data._count || prev._count\n      }));\n\n      toast({\n        title: 'Success',\n        description: 'Deck updated successfully.',\n      });\n    } catch (error) {\n      // Revert optimistic update\n      refreshDeck();\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to update deck',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [deck.id, refreshDeck, toast]);\n\n  const updateCard = useCallback(async (cardId: string, updates: Partial<Card>) => {\n    setIsLoading(true);\n    try {\n      // Optimistic update\n      setDeck(prev => ({\n        ...prev,\n        cards: prev.cards.map(card => \n          card.id === cardId ? { ...card, ...updates } : card\n        ),\n      }));\n\n      const response = await fetch(`/api/decks/${deck.id}/cards/${cardId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) throw new Error('Failed to update card');\n\n      const data = await response.json();\n      \n      // Update the specific card with server data\n      setDeck(prev => ({\n        ...prev,\n        cards: prev.cards.map(card => \n          card.id === cardId ? data.data : card\n        ),\n      }));\n\n      toast({\n        title: 'Success',\n        description: 'Card updated successfully.',\n      });\n    } catch (error) {\n      // Revert optimistic update\n      refreshDeck();\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to update card',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [deck.id, refreshDeck, toast]);\n\n  const addCards = useCallback(async (newCards: Omit<Card, 'id' | 'deckId' | 'createdAt' | 'updatedAt' | 'order'>[]) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/decks/${deck.id}/cards`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ cards: newCards }),\n      });\n\n      if (!response.ok) throw new Error('Failed to add cards');\n\n      const data = await response.json();\n      \n      // Update deck with new cards\n      setDeck(prev => ({\n        ...prev,\n        cards: [...prev.cards, ...data.data],\n        _count: {\n          ...prev._count,\n          cards: prev._count.cards + data.data.length,\n        },\n      }));\n\n      toast({\n        title: 'Success',\n        description: `Added ${newCards.length} cards successfully.`,\n      });\n    } catch (error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to add cards',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [deck.id, toast]);\n\n  const reorderCards = useCallback(async (orderedIds: string[]) => {\n    setIsLoading(true);\n    try {\n      // Optimistic update\n      setDeck(prev => ({\n        ...prev,\n        cards: orderedIds\n          .map(id => prev.cards.find(card => card.id === id))\n          .filter((card): card is typeof prev.cards[0] => card !== undefined)\n      }));\n\n      const response = await fetch(`/api/decks/${deck.id}/cards/reorder`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ orderedIds }),\n      });\n\n      if (!response.ok) throw new Error('Failed to reorder cards');\n\n      const data = await response.json();\n      setDeck(prev => ({\n        ...prev,\n        cards: data.data\n      }));\n\n      toast({\n        title: 'Success',\n        description: 'Cards reordered successfully.',\n      });\n    } catch (error) {\n      // Revert optimistic update\n      refreshDeck();\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to reorder cards',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [deck.id, refreshDeck, toast]);\n\n  return {\n    deck,\n    isLoading,\n    updateDeck,\n    updateCard,\n    addCards,\n    reorderCards,\n  };\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/hooks/use-toast.ts",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/lib/transformers.ts",
      "content": "\n// lib/transformers.ts\nexport function transformPrismaDatesToString<T>(data: T): T {\n  if (data === null || data === undefined) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    return data.toISOString() as unknown as T;\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(transformPrismaDatesToString) as unknown as T;\n  }\n\n  if (typeof data === 'object') {\n    const transformed: any = {};\n    for (const [key, value] of Object.entries(data)) {\n      transformed[key] = transformPrismaDatesToString(value);\n    }\n    return transformed;\n  }\n\n  return data;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/lib/utils.ts",
      "content": "// lib/utils.ts\nimport { type ClassValue, clsx } from \"clsx\"\nimport { ReadonlyURLSearchParams } from \"next/navigation\";\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function convertPrismaDatesToStrings<T>(obj: T): T {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (obj instanceof Date) {\n    return obj.toISOString() as unknown as T;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(convertPrismaDatesToStrings) as unknown as T;\n  }\n\n  if (typeof obj === 'object') {\n    const converted: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      converted[key] = convertPrismaDatesToStrings(value);\n    }\n    return converted;\n  }\n\n  return obj;\n}\n\nexport function createSearchParams(\n  currentParams: URLSearchParams | ReadonlyURLSearchParams,\n  updates: Record<string, string | null>\n): URLSearchParams {\n  const params = new URLSearchParams();\n  \n  // Copy existing params\n  if (currentParams) {\n    currentParams.forEach((value, key) => {\n      params.set(key, value);\n    });\n  }\n  \n  // Apply updates\n  Object.entries(updates).forEach(([key, value]) => {\n    if (value === null) {\n      params.delete(key);\n    } else {\n      params.set(key, value);\n    }\n  });\n  \n  return params;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/middleware.ts",
      "content": "// middleware.ts\nimport { withAuth } from 'next-auth/middleware'\nimport { NextResponse } from 'next/server'\n\nexport default withAuth(\n  function middleware(req) {\n    const isAuth = req.nextauth.token\n    const isAuthPage = req.nextUrl.pathname.startsWith('/auth')\n    \n    if (isAuthPage && isAuth) {\n      return NextResponse.redirect(new URL('/dashboard', req.url))\n    }\n    \n    return NextResponse.next()\n  },\n  {\n    callbacks: {\n      authorized: ({ token }) => !!token,\n    },\n  }\n)\n\nexport const config = {\n  matcher: [\n    '/dashboard/:path*',\n    '/auth/:path*'\n  ],\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/next-env.d.ts",
      "content": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/package.json",
      "content": "{\n  \"name\": \"42recall\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"tsc --noEmit || true && next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@auth/prisma-adapter\": \"^2.7.2\",\n    \"@dnd-kit/core\": \"^6.1.0\",\n    \"@dnd-kit/sortable\": \"^8.0.0\",\n    \"@dnd-kit/utilities\": \"^3.2.2\",\n    \"@headlessui/react\": \"^2.1.10\",\n    \"@heroicons/react\": \"^2.1.5\",\n    \"@prisma/client\": \"^5.21.1\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.2\",\n    \"@radix-ui/react-dialog\": \"^1.1.2\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.2\",\n    \"@radix-ui/react-progress\": \"^1.1.0\",\n    \"@radix-ui/react-select\": \"^2.1.2\",\n    \"@radix-ui/react-slot\": \"^1.1.0\",\n    \"@radix-ui/react-switch\": \"^1.1.1\",\n    \"@radix-ui/react-toast\": \"^1.2.2\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.292.0\",\n    \"next\": \"14.0.3\",\n    \"next-auth\": \"^4.24.5\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"recharts\": \"^2.13.0\",\n    \"sonner\": \"^1.5.0\",\n    \"swr\": \"^2.2.5\",\n    \"tailwind-merge\": \"^2.5.4\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"^3.23.8\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"autoprefixer\": \"^10.0.1\",\n    \"eslint\": \"^9.13.0\",\n    \"postcss\": \"^8\",\n    \"prisma\": \"^5.21.1\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"typescript\": \"^5\"\n  }\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/postcss.config.js",
      "content": "// postcss.config.js\nmodule.exports = {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n    },\n  }"
    },
    {
      "path": "/goinfre/zelhajou/42recall/prisma/migrations/20241024132738_init/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" TEXT NOT NULL,\n    \"email\" TEXT NOT NULL,\n    \"name\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Deck\" (\n    \"id\" TEXT NOT NULL,\n    \"title\" TEXT NOT NULL,\n    \"description\" TEXT,\n    \"isPublic\" BOOLEAN NOT NULL DEFAULT false,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"userId\" TEXT NOT NULL,\n\n    CONSTRAINT \"Deck_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Card\" (\n    \"id\" TEXT NOT NULL,\n    \"front\" TEXT NOT NULL,\n    \"back\" TEXT NOT NULL,\n    \"hint\" TEXT,\n    \"deckId\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Card_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Project\" (\n    \"id\" TEXT NOT NULL,\n    \"title\" TEXT NOT NULL,\n    \"description\" TEXT,\n    \"startDate\" TIMESTAMP(3) NOT NULL,\n    \"endDate\" TIMESTAMP(3),\n    \"userId\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Project_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Progress\" (\n    \"id\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"cardId\" TEXT NOT NULL,\n    \"status\" TEXT NOT NULL,\n    \"lastReview\" TIMESTAMP(3) NOT NULL,\n    \"nextReview\" TIMESTAMP(3),\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Progress_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"_DeckToProject\" (\n    \"A\" TEXT NOT NULL,\n    \"B\" TEXT NOT NULL\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Progress_userId_cardId_key\" ON \"Progress\"(\"userId\", \"cardId\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"_DeckToProject_AB_unique\" ON \"_DeckToProject\"(\"A\", \"B\");\n\n-- CreateIndex\nCREATE INDEX \"_DeckToProject_B_index\" ON \"_DeckToProject\"(\"B\");\n\n-- AddForeignKey\nALTER TABLE \"Deck\" ADD CONSTRAINT \"Deck_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Card\" ADD CONSTRAINT \"Card_deckId_fkey\" FOREIGN KEY (\"deckId\") REFERENCES \"Deck\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Project\" ADD CONSTRAINT \"Project_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Progress\" ADD CONSTRAINT \"Progress_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Progress\" ADD CONSTRAINT \"Progress_cardId_fkey\" FOREIGN KEY (\"cardId\") REFERENCES \"Card\"(\"id\") ON DELETE RESTRICT ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_DeckToProject\" ADD CONSTRAINT \"_DeckToProject_A_fkey\" FOREIGN KEY (\"A\") REFERENCES \"Deck\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"_DeckToProject\" ADD CONSTRAINT \"_DeckToProject_B_fkey\" FOREIGN KEY (\"B\") REFERENCES \"Project\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/prisma/schema prisma.md",
      "content": "// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"POSTGRES_PRISMA_URL\")\n  directUrl = env(\"POSTGRES_URL_NON_POOLING\")\n}\n\n// NextAuth.js Models\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  decks         Deck[]\n  cardProgress  CardProgress[]\n  studySessions StudySession[]\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\n// Flashcard Application Models\nmodel Deck {\n  id            String    @id @default(cuid())\n  title         String\n  description   String?\n  isPublic      Boolean   @default(false)\n  userId        String\n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  cards         Card[]\n  tags          Tag[]\n  studySessions StudySession[]\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n\n  @@index([userId])\n}\n\nmodel Card {\n  id           String         @id @default(cuid())\n  front        String\n  back         String\n  hint         String?\n  deckId       String\n  deck         Deck          @relation(fields: [deckId], references: [id], onDelete: Cascade)\n  progress     CardProgress[]\n  createdAt    DateTime      @default(now())\n  updatedAt    DateTime      @updatedAt\n  order        Int\n  \n  @@index([deckId])\n}\n\nmodel Tag {\n  id        String   @id @default(cuid())\n  name      String   @unique\n  decks     Deck[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel CardProgress {\n  id            String   @id @default(cuid())\n  userId        String\n  cardId        String\n  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  card          Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)\n  easeFactor    Float    @default(2.5)\n  interval      Int      @default(0)\n  repetitions   Int      @default(0)\n  nextReview    DateTime @default(now())\n  lastReviewed  DateTime @default(now())\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  @@unique([userId, cardId])\n  @@index([userId])\n  @@index([cardId])\n  @@index([nextReview])\n}\n\nmodel StudySession {\n  id        String   @id @default(cuid())\n  userId    String\n  deckId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)\n  startTime DateTime @default(now())\n  endTime   DateTime?\n  cardsStudied Int   @default(0)\n  \n  @@index([userId])\n  @@index([deckId])\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/prisma/schema.prisma",
      "content": "// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"POSTGRES_PRISMA_URL\")\n  directUrl = env(\"POSTGRES_URL_NON_POOLING\")\n}\n\n// NextAuth.js Models\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel User {\n  id            String         @id @default(cuid())\n  name          String?\n  email         String?        @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  decks         Deck[]\n  cardProgress  CardProgress[]\n  studySessions StudySession[]\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\nmodel Deck {\n  id            String    @id @default(cuid())\n  title         String\n  description   String?\n  project       String?   // Add this line\n  topic        String?   // Add this line\n  isPublic      Boolean   @default(false)\n  userId        String\n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  cards         Card[]\n  tags          Tag[]\n  studySessions StudySession[]\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n\n  @@index([userId])\n}\n\nmodel Card {\n  id        String         @id @default(cuid())\n  front     String\n  back      String\n  hint      String?\n  code      String?\n  order     Int\n  deckId    String\n  deck      Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)\n  progress  CardProgress[] // Add this line to establish the relation\n  createdAt DateTime       @default(now())\n  updatedAt DateTime       @updatedAt\n\n  @@index([deckId])\n}\n\nmodel Tag {\n  id        String   @id @default(cuid())\n  name      String   @unique\n  decks     Deck[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel CardProgress {\n  id           String   @id @default(cuid())\n  userId       String\n  cardId       String\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  card         Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)\n  easeFactor   Float    @default(2.5)\n  interval     Int      @default(0)\n  repetitions  Int      @default(0)\n  nextReview   DateTime @default(now())\n  lastReviewed DateTime @default(now())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  @@unique([userId, cardId])\n  @@index([userId])\n  @@index([cardId])\n  @@index([nextReview])\n}\n\nmodel StudySession {\n  id           String    @id @default(cuid())\n  userId       String\n  deckId       String\n  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  deck         Deck      @relation(fields: [deckId], references: [id], onDelete: Cascade)\n  startTime    DateTime  @default(now())\n  endTime      DateTime?\n  cardsStudied Int       @default(0)\n\n  @@index([userId])\n  @@index([deckId])\n}\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/project-reader.js",
      "content": "const fs = require('fs').promises;\nconst path = require('path');\n\n// Files and directories to ignore\nconst ignoreList = [\n    'node_modules',\n    '.git',\n    '.next',\n    'dist',\n    '.env',\n    '.env.local',\n    '.env.development',\n    '.env.production',\n    'package-lock.json',\n    'yarn.lock',\n    '.DS_Store',\n    'tsconfig.tsbuildinfo'\n];\n\n// File extensions to process\nconst allowedExtensions = [\n    '.ts',\n    '.tsx',\n    '.js',\n    '.jsx',\n    '.json',\n    '.prisma',\n    '.css',\n    '.md',\n    '.sql'\n];\n\nasync function readFile(filePath) {\n    try {\n        const content = await fs.readFile(filePath, 'utf8');\n        return {\n            path: filePath,\n            content: content\n        };\n    } catch (error) {\n        console.error(`Error reading file ${filePath}:`, error);\n        return null;\n    }\n}\n\nasync function scanDirectory(dirPath) {\n    const results = [];\n    \n    async function scan(currentPath) {\n        const entries = await fs.readdir(currentPath, { withFileTypes: true });\n        \n        for (const entry of entries) {\n            const fullPath = path.join(currentPath, entry.name);\n            const relativePath = path.relative(process.cwd(), fullPath);\n            \n            // Skip ignored files and directories\n            if (ignoreList.some(ignore => relativePath.includes(ignore))) {\n                continue;\n            }\n            \n            if (entry.isDirectory()) {\n                await scan(fullPath);\n            } else {\n                const ext = path.extname(entry.name);\n                if (allowedExtensions.includes(ext)) {\n                    const fileContent = await readFile(fullPath);\n                    if (fileContent) {\n                        results.push(fileContent);\n                    }\n                }\n            }\n        }\n    }\n    \n    await scan(dirPath);\n    return results;\n}\n\nasync function writeResults(results) {\n    const output = {\n        timestamp: new Date().toISOString(),\n        fileCount: results.length,\n        files: results\n    };\n    \n    await fs.writeFile(\n        'project-files.json',\n        JSON.stringify(output, null, 2),\n        'utf8'\n    );\n}\n\nasync function main() {\n    try {\n        console.log('Starting project scan...');\n        const projectPath = process.cwd();\n        const results = await scanDirectory(projectPath);\n        \n        console.log(`Found ${results.length} files. Writing results...`);\n        await writeResults(results);\n        \n        console.log('Project scan complete! Results written to project-files.json');\n    } catch (error) {\n        console.error('Error scanning project:', error);\n        process.exit(1);\n    }\n}\n\nmain();\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/project_structure.md",
      "content": ".\n├── Dockerfile\n├── README.md\n├── app\n│   ├── (protected)\n│   │   ├── dashboard\n│   │   │   ├── create\n│   │   │   │   └── page.tsx\n│   │   │   ├── decks\n│   │   │   │   ├── [deckId]\n│   │   │   │   │   ├── page.tsx\n│   │   │   │   │   └── study\n│   │   │   │   │       └── page.tsx\n│   │   │   │   ├── layout.tsx\n│   │   │   │   └── page.tsx\n│   │   │   ├── layout.tsx\n│   │   │   ├── page.tsx\n│   │   │   └── study\n│   │   │       └── page.tsx\n│   │   └── layout.tsx\n│   ├── api\n│   │   ├── auth\n│   │   │   ├── [...nextauth]\n│   │   │   │   └── route.ts\n│   │   │   └── signin\n│   │   │       └── page.tsx\n│   │   └── decks\n│   │       ├── [deckId]\n│   │       │   ├── cards\n│   │       │   │   ├── [cardId]\n│   │       │   │   │   ├── route.ts\n│   │       │   │   │   └── study\n│   │       │   │   │       └── route.ts\n│   │       │   │   ├── reorder\n│   │       │   │   │   └── route.ts\n│   │       │   │   └── route.ts\n│   │       │   ├── route.ts\n│   │       │   └── study-sessions\n│   │       │       └── route.ts\n│   │       └── route.ts\n│   ├── auth\n│   │   ├── error\n│   │   │   └── page.tsx\n│   │   └── signin\n│   │       └── page.tsx\n│   ├── components\n│   │   ├── auth\n│   │   │   ├── auth-component.tsx\n│   │   │   └── login-button.tsx\n│   │   ├── dashboard\n│   │   │   ├── dashboard-metrics.tsx\n│   │   │   ├── dashboard-overview.tsx\n│   │   │   └── layout.tsx\n│   │   ├── decks\n│   │   │   ├── card-skeleton.tsx\n│   │   │   ├── deck-card.tsx\n│   │   │   ├── deck-details.tsx\n│   │   │   ├── deck-error.tsx\n│   │   │   ├── deck-filters.tsx\n│   │   │   ├── deck-form.tsx\n│   │   │   ├── deck-skeleton.tsx\n│   │   │   └── reorderable-card-list.tsx\n│   │   ├── dialogs\n│   │   │   ├── add-card-dialog.tsx\n│   │   │   ├── delete-confirm-dialog.tsx\n│   │   │   ├── edit-card-dialog.tsx\n│   │   │   ├── edit-deck-dialog.tsx\n│   │   │   ├── index.ts\n│   │   │   └── share-deck-dialog.tsx\n│   │   ├── providers\n│   │   │   ├── auth-provider.tsx\n│   │   │   └── toast-provider.tsx\n│   │   ├── study\n│   │   │   ├── study-dashboard.tsx\n│   │   │   └── study-session.tsx\n│   │   └── ui\n│   │       ├── alert-dialog.tsx\n│   │       ├── alert.tsx\n│   │       ├── badge.tsx\n│   │       ├── button.tsx\n│   │       ├── card.tsx\n│   │       ├── dialog.tsx\n│   │       ├── dropdown-menu.tsx\n│   │       ├── input.tsx\n│   │       ├── pagination.tsx\n│   │       ├── progress.tsx\n│   │       ├── select.tsx\n│   │       ├── switch.tsx\n│   │       ├── textarea.tsx\n│   │       ├── toast.tsx\n│   │       ├── toaster.tsx\n│   │       └── use-toast.ts\n│   ├── contexts\n│   │   └── deck-context.tsx\n│   ├── favicon.ico\n│   ├── fonts\n│   │   ├── GeistMonoVF.woff\n│   │   └── GeistVF.woff\n│   ├── globals.css\n│   ├── layout.tsx\n│   ├── lib\n│   │   ├── auth.ts\n│   │   ├── custom-prisma-adapter.ts\n│   │   ├── prisma.ts\n│   │   ├── transformers.ts\n│   │   └── utils.ts\n│   └── page.tsx\n├── components.json\n├── docker-compose.yml\n├── hooks\n│   ├── use-deck.ts\n│   └── use-toast.ts\n├── lib\n│   ├── transformers.ts\n│   └── utils.ts\n├── middleware.ts\n├── next-env.d.ts\n├── next.config.mjs\n├── package-lock.json\n├── package.json\n├── postcss.config.js\n├── postcss.config.mjs\n├── prisma\n│   ├── migrations\n│   │   ├── 20241024132738_init\n│   │   │   └── migration.sql\n│   │   └── migration_lock.toml\n│   ├── schema prisma.md\n│   ├── schema.prisma\n│   └── schema.prisma:110\n├── project_structure.md\n├── public\n│   ├── 42_Logo.svg\n│   ├── file.svg\n│   ├── globe.svg\n│   ├── images\n│   │   └── logo.svg\n│   ├── next.svg\n│   ├── vercel.svg\n│   └── window.svg\n├── tailwind.config.ts\n├── tsconfig.json\n├── tsconfig.tsbuildinfo\n└── types\n    ├── deck.ts\n    ├── index.ts\n    ├── prisma.d.ts\n    └── study.ts\n\n42 directories, 106 files\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/scan-project.js",
      "content": "const fs = require('fs').promises;\nconst path = require('path');\n\n// Files and directories to ignore\nconst ignoreList = [\n    'node_modules',\n    '.git',\n    '.next',\n    'dist',\n    '.env',\n    '.env.local',\n    '.env.development',\n    '.env.production',\n    'package-lock.json',\n    'yarn.lock',\n    '.DS_Store',\n    'tsconfig.tsbuildinfo'\n];\n\n// File extensions to process\nconst allowedExtensions = [\n    '.ts',\n    '.tsx',\n    '.js',\n    '.jsx',\n    '.json',\n    '.prisma',\n    '.css',\n    '.md',\n    '.sql'\n];\n\nasync function readFile(filePath) {\n    try {\n        const content = await fs.readFile(filePath, 'utf8');\n        return {\n            path: filePath,\n            content: content\n        };\n    } catch (error) {\n        console.error(`Error reading file ${filePath}:`, error);\n        return null;\n    }\n}\n\nasync function scanDirectory(dirPath) {\n    const results = [];\n    \n    async function scan(currentPath) {\n        const entries = await fs.readdir(currentPath, { withFileTypes: true });\n        \n        for (const entry of entries) {\n            const fullPath = path.join(currentPath, entry.name);\n            const relativePath = path.relative(process.cwd(), fullPath);\n            \n            // Skip ignored files and directories\n            if (ignoreList.some(ignore => relativePath.includes(ignore))) {\n                continue;\n            }\n            \n            if (entry.isDirectory()) {\n                await scan(fullPath);\n            } else {\n                const ext = path.extname(entry.name);\n                if (allowedExtensions.includes(ext)) {\n                    const fileContent = await readFile(fullPath);\n                    if (fileContent) {\n                        results.push(fileContent);\n                    }\n                }\n            }\n        }\n    }\n    \n    await scan(dirPath);\n    return results;\n}\n\nasync function writeResults(results) {\n    const output = {\n        timestamp: new Date().toISOString(),\n        fileCount: results.length,\n        files: results\n    };\n    \n    await fs.writeFile(\n        'project-files.json',\n        JSON.stringify(output, null, 2),\n        'utf8'\n    );\n}\n\nasync function main() {\n    try {\n        console.log('Starting project scan...');\n        const projectPath = process.cwd();\n        const results = await scanDirectory(projectPath);\n        \n        console.log(`Found ${results.length} files. Writing results...`);\n        await writeResults(results);\n        \n        console.log('Project scan complete! Results written to project-files.json');\n    } catch (error) {\n        console.error('Error scanning project:', error);\n        process.exit(1);\n    }\n}\n\nmain();\n"
    },
    {
      "path": "/goinfre/zelhajou/42recall/tailwind.config.ts",
      "content": "// tailwind.config.ts\nimport type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config"
    },
    {
      "path": "/goinfre/zelhajou/42recall/tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"@/lib/*\": [\"./lib/*\"],\n      \"@/components/*\": [\"./app/components/*\"],\n      \"@/contexts/*\": [\"./app/contexts/*\"],\n      \"@/hooks/*\": [\"./hooks/*\"],\n      \"@/types/*\": [\"./types/*\"]\n\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\", \"next.config.mjs\"],\n  \"exclude\": [\"node_modules\"]\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/types/deck.ts",
      "content": "// types/deck.ts\nimport { z } from 'zod';\n\nexport const searchParamsSchema = z.object({\n  page: z.coerce.number().optional().default(1),\n  limit: z.coerce.number().optional().default(12),\n  search: z.string().optional(),\n  project: z.string().optional(),\n  topic: z.string().optional(),\n  sort: z.enum(['updated', 'created', 'alpha', 'cards']).optional().default('updated'),\n});\n\nexport type SearchParams = z.infer<typeof searchParamsSchema>;\n\nexport interface DeckFilters {\n    search: string;\n    project: string | null;\n    topic: string | null;\n    sortBy: 'updated' | 'created' | 'alpha' | 'cards';\n  }\n  \n  export interface PaginationState {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  }\n\n\n  // types/deck.ts\n// types/deck.ts\nexport interface DeckFilters {\n  search: string;\n  project: string | null;\n  topic: string | null;\n  sortBy: 'updated' | 'created' | 'alpha' | 'cards';\n}\n\nexport type DeckSortOption = DeckFilters['sortBy'];\n\nexport interface Card {\n  id: string;\n  front: string;\n  back: string;\n  hint: string | null;\n  code: string | null;\n  order: number;\n  deckId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Tag {\n  id: string;\n  name: string;\n}\n\nexport interface User {\n  id: string;\n  name: string | null;\n  image: string | null;\n}\n\n// types/deck.ts\nexport interface Deck {\n  id: string;\n  title: string;\n  description: string | null;\n  project: string | null;\n  topic: string | null;\n  isPublic: boolean;\n  userId: string;\n  createdAt: string;\n  updatedAt: string;\n  cards: Card[];\n  tags: Tag[];\n  user: User;\n  _count: {\n    cards: number;\n  };\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/types/index.ts",
      "content": "// types/index.ts\nimport { Prisma } from '@prisma/client'\n\n// Extend next-auth types\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n    }\n  }\n}\n\n// Custom types for the application\nexport type DeckWithCards = Prisma.DeckGetPayload<{\n  include: {\n    cards: true;\n    tags: true;\n    user: {\n      select: {\n        id: true;\n        name: true;\n        image: true;\n      }\n    }\n  }\n}>\n\nexport type CardWithProgress = Prisma.CardGetPayload<{\n  include: {\n    progress: true;\n  }\n}>\n\nexport interface StudySessionData {\n  deckId: string;\n  startTime: Date;\n  cardsStudied: number;\n}\n\n// API response types\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/types/prisma.d.ts",
      "content": "// types/prisma.d.ts\nimport { Prisma } from '@prisma/client'\n\ndeclare global {\n  namespace PrismaTypes {\n    type UserWithRelations = Prisma.UserGetPayload<{\n      include: {\n        accounts: true\n        sessions: true\n      }\n    }>\n  }\n}"
    },
    {
      "path": "/goinfre/zelhajou/42recall/types/study.ts",
      "content": "// types/study.ts\nexport interface StudySession {\n    id: string;\n    deckId: string;\n    startTime: string;\n    endTime: string | null;\n    cardsStudied: number;\n    deck: {\n      title: string;\n      project: string | null;\n      topic: string | null;\n    };\n  }\n  \n  export interface CardProgress {\n    id: string;\n    lastReviewed: string;\n    nextReview: string;\n  }\n  \n  export interface DeckWithProgress {\n    id: string;\n    title: string;\n    project: string | null;\n    topic: string | null;\n    _count: {\n      cards: number;\n    };\n    cards: Array<{\n      id: string;\n      progress: CardProgress[];\n    }>;\n  }\n  \n  export interface StudyStats {\n    _count: {\n      _all: number;\n    };\n    _sum: {\n      cardsStudied: number;\n    };\n  }\n  \n  export interface StudyDashboardData {\n    decks: DeckWithProgress[];\n    recentSessions: StudySession[];\n    stats: StudyStats;\n  }"
    }
  ]
}
